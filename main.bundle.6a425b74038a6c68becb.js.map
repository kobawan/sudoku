{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/assets/index.html","webpack:///./src/js/consts.ts","webpack:///./src/js/utils/generalUtils.ts","webpack:///./src/js/utils/localStorage.ts","webpack:///./src/js/generator/generator.ts","webpack:///./src/js/utils/server.ts","webpack:///./src/js/components/app/ducks/requests.ts","webpack:///./src/js/components/app/ducks/selectors.ts","webpack:///./src/js/utils/arrayUtils.ts","webpack:///./src/js/components/game-page/helpers/gameTable.ts","webpack:///./src/js/components/buttons/Button.tsx","webpack:///./src/js/components/game-page/helpers/helpers.ts","webpack:///./src/js/components/game-page/ducks/selectors.ts","webpack:///./src/js/components/game-page/helpers/gameNotesCells.ts","webpack:///./src/js/components/svg/Icons.tsx","webpack:///./src/js/components/popup/Popup.tsx","webpack:///./src/js/components/popup/ducks/selectors.ts","webpack:///./src/js/utils/sessionStorage.ts","webpack:///./src/js/components/popup/ducks/actions.tsx","webpack:///./src/js/components/game-page/ducks/actions.tsx","webpack:///./src/js/components/game-page/ducks/reducer.ts","webpack:///./src/js/components/menu-content/types.ts","webpack:///./src/js/components/login-form/ducks/actions.tsx","webpack:///./src/js/utils/saveToDatabaseOrStorage.ts","webpack:///./src/js/components/app/ducks/actions.ts","webpack:///./src/js/components/app/ducks/reducer.ts","webpack:///./src/js/components/popup/ducks/reducer.ts","webpack:///./src/js/components/side-menu/ducks/reducer.ts","webpack:///./src/js/ducks/middlewares/autoSave.ts","webpack:///./src/js/components/login-form/ducks/reducer.ts","webpack:///./src/js/ducks/store.ts","webpack:///./src/js/components/side-menu/ducks/actions.tsx","webpack:///./src/js/ducks/middlewares/network.ts","webpack:///./src/js/utils/logout.ts","webpack:///./src/js/components/menu-content/MenuContentSection.tsx","webpack:///./src/js/components/main-menu/MainMenu.tsx","webpack:///./src/js/components/checkbox/Checkbox.tsx","webpack:///./src/js/components/menu-content/SettingsSection.tsx","webpack:///./src/js/components/menu-content/RulesSection.tsx","webpack:///./src/js/components/menu-content/ContactsSection.tsx","webpack:///./src/js/components/menu-content/StatsSection.tsx","webpack:///./src/js/components/menu-content/AboutSection.tsx","webpack:///./src/js/utils/formHandlers.ts","webpack:///./src/js/components/login-form/ducks/selectors.ts","webpack:///./src/js/components/login-form/LoginForm.tsx","webpack:///./src/js/components/lobby-page/LobbyPage.tsx","webpack:///./src/js/components/side-menu/ducks/selectors.ts","webpack:///./src/js/components/side-menu/SideMenu.tsx","webpack:///./src/js/components/sudoku-cell/Cell.tsx","webpack:///./src/js/components/sudoku-cell/helpers.ts","webpack:///./src/js/components/sudoku-table/SudokuTable.tsx","webpack:///./src/js/utils/useOutsideClickHandle.ts","webpack:///./src/js/components/slider/Slider.tsx","webpack:///./src/js/components/game-page/GamePage.tsx","webpack:///./src/js/index.tsx","webpack:///./src/js/components/app/App.tsx"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","Page","GameDifficulty","GameType","CellMode","GamePhase","LocalStorageKeys","removeDuplicates","arr","pos","next","props","matrix","mask","createTemplate","val","gameTemplate","row","gameType","col","ratio","Math","floor","shufflePairs","rand1","rand2","newArr","randomize","shuffle","ceil","random","shuffleColumns","pos1","pos2","originalVal","shuffleColumnsInGrid","shuffleRowsInGrid","maskGame","grid","maskPositions","rand","dif","difficulty","includes","generate","fns","reduce","f","g","args","compose","this","type","Default","sqrt","commonOptions","headers","timeout","request","url","a","body","post","registerUser","username","password","SERVER_URL","getUser","getPage","state","app","page","getCurrentGame","currentGame","getHasCurrentGame","getLobbyIsLoading","lobbyIsLoading","getLobbyHasError","lobbyHasError","getLobbyMenuSection","lobbyMenuSection","isUserLoggedIn","user","getUserId","id","sortByRows","callback","sortByCols","sortByGrids","gameRatio","rowPos","rowGrid","colGrid","getDuplicates","cellProps","pencilCellsRows","Notes","pencilCellsCols","pencilCellsGrids","findDuplicates","rows","cols","grids","duplicates","outer","inner","currentPos","nextPos","GameButtonSize","storageKeysToDefaultMap","DisableInGameError","DisableHighlighting","DisableAutoNotesRemoval","CurrentGame","undefined","getStorageKey","localStorage","getItem","Error","JSON","parse","setStorageKey","setItem","stringify","console","error","updateCellsCellMode","cellMode","newCellProps","hasInvalidEndgameCells","updateCellsHighlight","selectedCell","cell","matchesValue","withHighlight","resetCellsHighlight","resetCellsError","withError","getCellMode","game","getCellProps","areCellsDisabled","Win","GameOver","gamePhase","getGamePhase","removeDuplicateNotesCells","coor","notesCellsRows","notesCellsCols","notesCellsGrids","x","y","getDuplicateNotesCells","split","filter","join","crossSvg","viewBox","className","arrowSvg","checkSvg","menuSvg","spinnerSvg","LoadingButton","disabled","loading","onClick","tabIndex","MenuButton","reversed","index","hidden","mapPropsToMenuButtons","buttons","map","PopupText","GameButton","icon","size","selected","Small","getPopupProps","popup","SessionStorageKeys","PopupTextMap","Solve","Reset","Duplicates","Check","NetworkError","Popup","text","isHidden","mapPropsToGameButtons","showPopup","payload","setCellProps","setGameState","setCellValue","updateGamePhase","phase","dispatch","getState","New","values","forEach","isReadOnlyCell","ReadOnly","Pencil","getNewCellProps","currentCellProps","getEndgameCellProps","showWinPopup","checkForWin","hasInvalidCells","hasDuplicates","showCheckPopup","updatePencilCells","disableInGameError","resetCellStatus","updateNotesCells","disableAutoNotesRemoval","canAutomaticallyUpdateNotesCells","initialState","MenuSection","UserId","setSessionStorageKey","sessionStorage","setFormError","saveToDatabaseOrStorage","userId","status","SET_CURRENT_GAME","setPage","setCurrentGame","setLobbyIsLoading","setLobbyHasError","setLobbyMenuSection","initLoggedInUserInfo","gameConfig","gameState","_id","findUser","getSessionStorageKey","storageGame","USER_ENDPOINT","config","initGuestUserInfo","loginUser","isNewUser","isValidationError","message","save","getGameState","Menu","errors","isOpen","shouldSaveOnActions","withDebounce","func","leading","trailing","confirmPassword","formError","formIsLoading","formType","isFormOpen","rootReducer","action","newCellMode","sideMenu","loginForm","middlewares","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","ArrowDirection","menuSectionButtons","Settings","Stats","Rules","About","MainMenu","hasCurrentGame","generateGame","Game","startNewGame","leftColumn","Easy","Medium","Hard","rightColumn","section","render","crossOnClick","title","content","withFooter","arrow","Left","arrowOnClick","Checkbox","storageKey","onChange","isChecked","setIsChecked","onChangeHandler","newChecked","checked","disableHighlightingProps","disableAutoNotesRemovalProps","Contacts","href","target","rel","onFormItemBlur","validator","e","currentTarget","getLoginFormProps","isRegistrationForm","isLoginRegistrationFormOpen","validateUsername","validatePassword","LoginForm","isRegistration","toggleForm","preventDefault","setError","handleUsernameChange","handlePasswordChange","handleConfirmPasswordChange","onUsernameBlur","onPasswordBlur","onConfirmPasswordBlur","pwd","confirmPwd","validateConfirmPassword","onSubmit","trim","htmlFor","onBlur","mapMenuSectionToComponent","onErrorDisabledChange","disableInGameProps","Content","LobbyPage","isLoading","hasError","currentSection","isReady","setSection","Component","getSectionComponent","getSideMenuIsOpen","SideMenu","returnToLobby","toggleMenu","sideMenuButtons","showResetPopup","showSolvePopup","Cell","isDisabled","onSelect","select","selectCellContent","readOnly","maxLength","onKeyUp","keyCode","sudokuTable","document","querySelector","coorRow","coorCol","cells","children","focus","arrowKeys","onFocus","match","newValue","sort","updateCellValue","SudokuTable","ref","clickHandler","handleClickOutside","event","current","contains","activeElement","addEventListener","removeEventListener","useOutsideClickHandle","getTable","Slider","GamePage","selectedPage","isLobby","getElementById"],"mappings":"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","file":"main.bundle.6a425b74038a6c68becb.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([27,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","module.exports = \"<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n  <head>\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\" />\\n    <meta charset=\\\"UTF-8\\\" />\\n    <meta\\n      name=\\\"description\\\"\\n      content=\\\"A Japanese theme-inspired Sudoku game with various levels of difficulty, your personal profile and an automatic solver if you just need a quick win!\\\"\\n    />\\n    <meta name=\\\"keywords\\\" content=\\\"sudoku, game, puzzle\\\" />\\n    <meta name=\\\"author\\\" content=\\\"Sara Jegorova\\\" />\\n    <title>Sudokuuu</title>\\n  </head>\\n  <body>\\n    <div id=\\\"root\\\"></div>\\n  </body>\\n</html>\\n\";","import { Action, Middleware } from \"redux\";\nimport { ThunkAction, ThunkMiddleware } from \"redux-thunk\";\nimport { RootState } from \"./ducks/store\";\n\nexport enum Page {\n  Game,\n  Menu,\n}\n\nexport enum GameDifficulty {\n  Easy = 4,\n  Medium = 5,\n  Hard = 6,\n}\n\nexport enum GameType {\n  Default = 9,\n}\n\nexport interface GameConfig {\n  difficulty: GameDifficulty;\n  type?: GameType;\n  shuffle?: number;\n}\n\nexport enum CellMode {\n  Pencil = \"pencil\",\n  Notes = \"notes\",\n  ReadOnly = \"readOnly\",\n}\n\nexport enum GamePhase {\n  New,\n  Playing,\n  Win,\n  GameOver,\n}\n\nexport interface CellProps {\n  mode: CellMode;\n  withHighlight: boolean;\n  withError: boolean;\n  value: number;\n}\n\nexport interface TableCellsMap {\n  [key: number]: CellProps;\n}\n\nexport interface CellCoordinates {\n  x: number;\n  y: number;\n  grid: number;\n}\n\nexport interface User {\n  username: string;\n  id: string;\n}\n\nexport interface RequestError {\n  message: string;\n  status?: number;\n  isValidationError?: boolean;\n}\n\nexport interface ActionWithPayload<T, P> extends Action<T> {\n  payload: P;\n}\n\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n\nexport type AppMiddleware = Middleware<{}, RootState>;\n\nexport type AppThunkMiddleware = ThunkMiddleware<RootState>;\n","export const compose = (...fns: Function[]) =>\n  fns.reduce((f, g) => (...args: any[]) => f(g(...args)));\n\nexport const removeDuplicates = <T>(arr: T[]) => {\n  if (arr.length !== 1) {\n    for (let pos = 0; pos < arr.length; pos++) {\n      for (let next = 1; next < arr.length - pos; next++) {\n        if (arr[pos] === arr[pos + next]) {\n          arr.splice(pos + next, 1);\n        }\n      }\n    }\n  }\n  return arr;\n};\n","import { SavedGame } from \"../components/app/ducks/requests\";\n\nexport enum LocalStorageKeys {\n  DisableInGameError = \"DisableInGameError\",\n  DisableHighlighting = \"DisableHighlighting\",\n  DisableAutoNotesRemoval = \"DisableAutoNotesRemoval\",\n  CurrentGame = \"CurrentGame\",\n}\n\ntype StorageKeysType = boolean | SavedGame | undefined;\n\nconst storageKeysToDefaultMap: {\n  [key in LocalStorageKeys]: StorageKeysType;\n} = {\n  [LocalStorageKeys.DisableInGameError]: false,\n  [LocalStorageKeys.DisableHighlighting]: false,\n  [LocalStorageKeys.DisableAutoNotesRemoval]: false,\n  [LocalStorageKeys.CurrentGame]: undefined,\n};\n\nexport const getStorageKey = (key: LocalStorageKeys): StorageKeysType => {\n  try {\n    const value = window.localStorage.getItem(key);\n    if (value === null) {\n      throw new Error();\n    }\n    return JSON.parse(value);\n  } catch {\n    return storageKeysToDefaultMap[key];\n  }\n};\n\nexport const setStorageKey = (\n  key: LocalStorageKeys,\n  value: StorageKeysType\n) => {\n  try {\n    window.localStorage.setItem(key, JSON.stringify(value));\n  } catch {\n    console.error(`Local storage: Was not able to set item in key ${key}`);\n  }\n};\n","import { compose } from \"../utils/generalUtils\";\nimport { GameConfig, GameType, GameDifficulty } from \"../consts\";\n\nexport class Game {\n  public readonly gameType: GameType;\n  public readonly difficulty: GameDifficulty;\n  public readonly ratio: number;\n  public readonly matrix: number[] = []; // Array of result ordered by rows\n  public readonly mask: number[] = []; // Array of masked result ordered by rows\n  public readonly shuffle: number;\n\n  constructor(props: GameConfig) {\n    this.gameType = props.type || GameType.Default;\n    this.difficulty = props.difficulty;\n    this.ratio = Math.sqrt(this.gameType);\n    this.shuffle = props.shuffle || 60;\n    const result = this.generate();\n    this.matrix = result.matrix;\n    this.mask = result.mask;\n  }\n  /*\n   * Creates array ordered by row with values:\n   * 123|456|789\n   * 456|789|123\n   * 789|123|456\n   * ---|---|---\n   * 234|567|891\n   * 567|891|234\n   * 891|234|567\n   * ---|---|---\n   * 345|678|912\n   * 678|912|345\n   * 912|345|678\n   */\n  private createTemplate = () => {\n    const gameTemplate: number[] = [];\n    let pos: number;\n    let val: number;\n    for (let row = 0; row < this.gameType; row++) {\n      for (let col = 0; col < this.gameType; col++) {\n        /**\n         * row * this.ratio = amount to skip each row. increments of row per grid size\n         * Math.floor(row / this.ratio) = amount to skip each grid-row. increments of 1 per grid-row\n         * col = column number to iterate\n         * % this.gameType + 1 = divisible by 9, and add 1\n         */\n        val =\n          ((row * this.ratio + Math.floor(row / this.ratio) + col) %\n            this.gameType) +\n          1;\n        pos = row * this.gameType + col;\n        gameTemplate[pos] = val;\n      }\n    }\n    return gameTemplate;\n  };\n\n  /*\n   * Replaces values in temp from rand1-to-rand2 and rand2-to-rand1\n   * and creates random combos of rand1 and rand2 to switch places\n   */\n  private shufflePairs = (arr: number[]) => {\n    let rand1: number;\n    let rand2: number;\n    const newArr = arr.slice();\n    for (let randomize = 0; randomize < this.shuffle; randomize++) {\n      rand1 = Math.ceil(Math.random() * this.gameType);\n      do {\n        rand2 = Math.ceil(Math.random() * this.gameType);\n      } while (rand1 === rand2); // as long as rand1 equals rand2 recalculate rand2\n\n      for (let pos = 0; pos < newArr.length; pos++) {\n        if (newArr[pos] === rand1) {\n          newArr[pos] = rand2;\n        } else if (newArr[pos] === rand2) {\n          newArr[pos] = rand1;\n        }\n      }\n    }\n    return newArr;\n  };\n\n  /*\n   * Replaces columns from rand1-to-rand2 and rand2-to-rand1\n   * and creates random combos of rand1 and rand2 to switch places\n   */\n  private shuffleColumns = (arr: number[]) => {\n    let rand1: number;\n    let rand2: number;\n    let pos1: number;\n    let pos2: number;\n    let originalVal: number;\n    const newArr = arr.slice();\n    for (let randomize = 0; randomize < this.shuffle; randomize++) {\n      rand1 = Math.floor(Math.random() * this.ratio);\n      do {\n        rand2 = Math.floor(Math.random() * this.ratio);\n      } while (rand1 === rand2); // as long as rand1 equals rand2 recalculate rand2\n\n      for (let pos = 0; pos < this.gameType; pos++) {\n        /**\n         * pos * this.gameType = pos of value in col, iterates through column\n         * rand1 * this.ratio = picks first column from random grid\n         * randomize % this.ratio = adds to picked column by iterating through divisibles of ratio\n         */\n        pos1 =\n          pos * this.gameType + (rand1 * this.ratio + (randomize % this.ratio));\n        pos2 =\n          pos * this.gameType + (rand2 * this.ratio + (randomize % this.ratio));\n        originalVal = newArr[pos1];\n        newArr[pos1] = newArr[pos2];\n        newArr[pos2] = originalVal;\n      }\n    }\n    return newArr;\n  };\n\n  /*\n   * Replaces columns inside grids from rand1-to-rand2 and rand2-to-rand1\n   * and creates random combos of rand1 and rand2 to switch places\n   */\n  private shuffleColumnsInGrid = (arr: number[]) => {\n    let rand1: number;\n    let rand2: number;\n    let pos1: number;\n    let pos2: number;\n    let originalVal: number;\n    const newArr = arr.slice();\n    for (let randomize = 0; randomize < this.shuffle; randomize++) {\n      rand1 = Math.floor(Math.random() * this.ratio);\n      do {\n        rand2 = Math.floor(Math.random() * this.ratio);\n      } while (rand1 === rand2); // as long as rand1 equals rand2 recalculate rand2\n\n      for (let pos = 0; pos < this.gameType; pos++) {\n        /**\n         * pos * this.gameType = pos of value in col, iterates through column\n         * randomize % this.ratio * this.ratio = iterates first column of each grid\n         * rand1 = picks which column in grid to shuffle\n         */\n        pos1 =\n          pos * this.gameType + ((randomize % this.ratio) * this.ratio + rand1);\n        pos2 =\n          pos * this.gameType + ((randomize % this.ratio) * this.ratio + rand2);\n        originalVal = newArr[pos1];\n        newArr[pos1] = newArr[pos2];\n        newArr[pos2] = originalVal;\n      }\n    }\n    return newArr;\n  };\n\n  private shuffleRowsInGrid = (arr: number[]) => {\n    let rand1: number;\n    let rand2: number;\n    let pos1: number;\n    let pos2: number;\n    let originalVal: number;\n    const newArr = arr.slice();\n    for (let randomize = 0; randomize < this.shuffle; randomize++) {\n      rand1 = Math.floor(Math.random() * this.ratio);\n      do {\n        rand2 = Math.floor(Math.random() * this.ratio);\n      } while (rand1 === rand2); // as long as rand1 equals rand2 recalculate rand2\n\n      for (let pos = 0; pos < this.gameType; pos++) {\n        /**\n         * pos = pos of value in first row, iterates through row\n         * this.gameType = moves pos to first value in picked row\n         * randomize % this.ratio * this.ratio = picks first row from random grid\n         * rand1 = adds to picked row by iterating through divisibles of ratio\n         */\n        pos1 =\n          pos + this.gameType * ((randomize % this.ratio) * this.ratio + rand1);\n        pos2 =\n          pos + this.gameType * ((randomize % this.ratio) * this.ratio + rand2);\n        originalVal = newArr[pos1];\n        newArr[pos1] = newArr[pos2];\n        newArr[pos2] = originalVal;\n      }\n    }\n    return newArr;\n  };\n\n  private maskGame = (matrix: number[]) => {\n    const arr = matrix.slice();\n\n    for (let grid = 0; grid < this.gameType; grid++) {\n      // creates array with position of grid cells to mask\n      const maskPositions: number[] = [];\n      let rand: number;\n      for (let dif = 0; dif < this.difficulty; dif++) {\n        do {\n          rand = Math.floor(Math.random() * this.gameType);\n        } while (maskPositions.includes(rand));\n        maskPositions.push(rand);\n      }\n      // masks cells in grid\n      for (let col = 0; col < this.gameType; col++) {\n        if (maskPositions.includes(col)) {\n          const pos =\n            // cell iterator\n            col +\n            (this.gameType - this.ratio) * Math.floor(col / this.ratio) +\n            // grid iterator\n            grid * this.ratio +\n            // rows of grids iterator\n            Math.floor(grid / this.ratio) * this.gameType * (this.ratio - 1);\n          arr[pos] = 0;\n        }\n      }\n    }\n    return arr;\n  };\n\n  private generate = () => {\n    const matrix: number[] = compose(\n      this.shuffleRowsInGrid,\n      this.shuffleColumnsInGrid,\n      this.shuffleColumns,\n      this.shufflePairs\n    )(this.createTemplate());\n    const mask = this.maskGame(matrix);\n\n    return { matrix, mask };\n  };\n}\n","import axios, { AxiosRequestConfig } from \"axios\";\n\nconst SERVER_URL =\n  process.env.NODE_ENV === \"production\"\n    ? \"https://kobawan-sudoku-server.herokuapp.com\"\n    : \"http://localhost:5000\";\n\nexport const REQUEST_TIMEOUT = 15000;\n\nexport const REGISTER_ENDPOINT = `${SERVER_URL}/register`;\nexport const LOGIN_ENDPOINT = `${SERVER_URL}/login`;\nexport const USER_ENDPOINT = `${SERVER_URL}/user`;\nexport const SAVE_GAME_ENDPOINT = `${SERVER_URL}/game`;\n\nconst commonHeaders = {\n  \"Cache-Control\": \"no-store, no-cache\",\n};\n\nconst commonOptions: AxiosRequestConfig = {\n  headers: commonHeaders,\n  timeout: REQUEST_TIMEOUT,\n};\n\nexport const isNetworkError = (message: string) => message === \"Network Error\";\n\nexport const request = {\n  get: <R = any>(url: string) => {\n    return axios.get<R>(url, commonOptions);\n  },\n  post: <R = any>(url: string, body = {}) => {\n    return axios.post<R>(url, body, commonOptions);\n  },\n  put: <R = any>(url: string, body = {}) => {\n    return axios.put<R>(url, body, commonOptions);\n  },\n  delete: <R = any>(url: string) => {\n    return axios.delete<R>(url, commonOptions);\n  },\n};\n","import {\n  SAVE_GAME_ENDPOINT,\n  request,\n  LOGIN_ENDPOINT,\n  REGISTER_ENDPOINT,\n  USER_ENDPOINT,\n} from \"../../../utils/server\";\nimport { Game } from \"../../../generator/generator\";\nimport { CellMode, GamePhase } from \"../../../consts\";\n\ninterface ErrorResponse {\n  type: \"fail\";\n  message: string;\n  isValidationError?: boolean;\n}\n\nexport interface UserData {\n  _id: string;\n  username: string;\n  gameConfig: Game | null;\n  gameState: {\n    cellMode: CellMode;\n    cellProps: string;\n    gamePhase: GamePhase;\n  } | null;\n}\n\nexport interface SavedGame {\n  config: NonNullable<UserData[\"gameConfig\"]>;\n  state: NonNullable<UserData[\"gameState\"]>;\n}\n\ninterface SuccessResponse {\n  type: \"success\";\n}\n\ntype Response<D = {}> = ErrorResponse | (SuccessResponse & D);\n\nexport const registerUser = (username: string, password: string) =>\n  request.post<Response<{ user: UserData }>>(REGISTER_ENDPOINT, {\n    username,\n    password,\n  });\n\nexport const getUser = (username: string, password: string) =>\n  request.post<Response<{ user: UserData }>>(LOGIN_ENDPOINT, {\n    username,\n    password,\n  });\n\nexport const getUserFromId = (id: string) =>\n  request.get<Response<{ user: UserData }>>(`${USER_ENDPOINT}/${id}`);\n\nexport const saveGame = (body: SavedGame & { id: string }) =>\n  request.post<Response>(SAVE_GAME_ENDPOINT, body);\n","import { RootState } from \"../../../ducks/store\";\n\nexport const getPage = (state: RootState) => state.app.page;\nexport const getCurrentGame = (state: RootState) => state.app.currentGame;\nexport const getHasCurrentGame = (state: RootState) => !!state.app.currentGame;\nexport const getLobbyIsLoading = (state: RootState) => state.app.lobbyIsLoading;\nexport const getLobbyHasError = (state: RootState) => state.app.lobbyHasError;\nexport const getLobbyMenuSection = (state: RootState) =>\n  state.app.lobbyMenuSection;\nexport const getErrors = (state: RootState) => state.app.errors;\nexport const isUserLoggedIn = (state: RootState) => !!state.app.user;\nexport const getUserId = (state: RootState) => (state.app.user || {}).id;\n","import { GameType } from \"../consts\";\n\nexport interface RowValues<ArrayType> {\n  row: number;\n  pos: number;\n  arr: ArrayType[][];\n}\n\n/**\n * Iterates through each cell row-wise and calls callback function for each cell.\n * Returns array from callback.\n */\nexport const sortByRows = <ArrayType = number>(\n  gameType: GameType,\n  callback: (values: RowValues<ArrayType>) => void\n) => {\n  let pos: number;\n  let values: RowValues<ArrayType>;\n  const arr: ArrayType[][] = [];\n  for (let row = 0; row < gameType; row++) {\n    arr.push([]);\n    for (let col = 0; col < gameType; col++) {\n      pos = row * gameType + col;\n      values = { row, pos, arr };\n      callback(values);\n    }\n  }\n  return arr;\n};\n\nexport interface ColumnValues<ArrayType> {\n  col: number;\n  pos: number;\n  arr: ArrayType[][];\n}\n\n/**\n * Iterates through each cell column-wise and calls callback function for each cell.\n * Returns array from callback.\n */\nexport const sortByCols = <ArrayType = number>(\n  gameType: GameType,\n  callback: (values: ColumnValues<ArrayType>) => void\n) => {\n  let pos: number;\n  let values: ColumnValues<ArrayType>;\n  const arr: ArrayType[][] = [];\n  for (let col = 0; col < gameType; col++) {\n    arr.push([]);\n    for (let row = 0; row < gameType; row++) {\n      pos = col + gameType * row;\n      values = { col, pos, arr };\n      callback(values);\n    }\n  }\n  return arr;\n};\n\nexport interface GridValues<ArrayType> {\n  row: number;\n  col: number;\n  grid: number;\n  pos: number;\n  arr: ArrayType[][];\n}\n\n/**\n * Iterates through each cell grid-wise and calls callback function for each cell.\n * Returns array from callback.\n * TODO improve function with one from generator\n */\nexport const sortByGrids = <ArrayType = number>(\n  gameType: GameType,\n  gameRatio: number,\n  callback: (values: GridValues<ArrayType>) => void\n) => {\n  let grid: number;\n  let rowPos: number;\n  let colPos: number;\n  let pos: number;\n  let values: GridValues<ArrayType>;\n  const arr: ArrayType[][] = [];\n  // rows of grids in table\n  for (let rowGrid = 0; rowGrid < gameRatio; rowGrid++) {\n    // columns of grids in table\n    for (let colGrid = 0; colGrid < gameRatio; colGrid++) {\n      // grid number horizontally\n      grid = rowGrid * gameRatio + colGrid;\n      arr.push([]);\n      // row per grid\n      for (let row = 0; row < gameRatio; row++) {\n        // position of first column in each grid\n        rowPos = (row + rowGrid * gameRatio) * gameType;\n        // column per grid\n        for (let col = 0; col < gameRatio; col++) {\n          // increment of column per grid and rows of grids\n          colPos = col + colGrid * gameRatio;\n          // final position\n          pos = rowPos + colPos;\n          values = { row, col, grid, pos, arr };\n          callback(values);\n        }\n      }\n    }\n  }\n  return arr;\n};\n","import { removeDuplicates } from \"../../../utils/generalUtils\";\nimport { sortByRows, sortByCols, sortByGrids } from \"../../../utils/arrayUtils\";\nimport { CellMode, TableCellsMap, GameType } from \"../../../consts\";\n\n/**\n * Finds pencil mode cell duplicates from rows, cols and grids\n */\nexport const getDuplicates = (\n  cellProps: TableCellsMap,\n  gameType: GameType,\n  gameRatio: number\n) => {\n  const pencilCellsRows = sortByRows(gameType, ({ arr, row, pos }) => {\n    if (cellProps[pos].mode !== CellMode.Notes && cellProps[pos].value) {\n      arr[row].push(pos);\n    }\n  });\n  const pencilCellsCols = sortByCols(gameType, ({ arr, col, pos }) => {\n    if (cellProps[pos].mode !== CellMode.Notes && cellProps[pos].value) {\n      arr[col].push(pos);\n    }\n  });\n  const pencilCellsGrids = sortByGrids(\n    gameType,\n    gameRatio,\n    ({ arr, grid, pos }) => {\n      if (cellProps[pos].mode !== CellMode.Notes && cellProps[pos].value) {\n        arr[grid].push(pos);\n      }\n    }\n  );\n  const duplicates = removeDuplicates(\n    findDuplicates(\n      pencilCellsRows,\n      pencilCellsCols,\n      pencilCellsGrids,\n      cellProps\n    )\n  );\n\n  return duplicates;\n};\n\n/**\n * Finds all occuring duplicates and returns array of their cell positions\n */\nconst findDuplicates = (\n  rows: number[][],\n  cols: number[][],\n  grids: number[][],\n  cellProps: TableCellsMap\n) => {\n  const arr: number[][] = [...rows, ...cols, ...grids];\n  const duplicates: number[] = [];\n  for (let outer = 0; outer < arr.length; outer++) {\n    for (let inner = 0; inner < arr[outer].length; inner++) {\n      for (let pos = 1; pos < arr[outer].length - inner; pos++) {\n        const currentPos = arr[outer][inner];\n        const nextPos = arr[outer][inner + pos];\n        if (cellProps[currentPos].value === cellProps[nextPos].value) {\n          duplicates.push(currentPos);\n          duplicates.push(nextPos);\n        }\n      }\n    }\n  }\n  return duplicates;\n};\n","import * as React from \"react\";\nimport cx from \"classnames\";\n\nimport \"./button.less\";\nimport { spinnerSvg } from \"../svg/Icons\";\n\nexport interface LoadingButtonProps {\n  value: string;\n  onClick: React.MouseEventHandler;\n  disabled?: boolean;\n  loading?: boolean;\n}\n\nexport const LoadingButton = ({\n  disabled,\n  loading,\n  onClick,\n  value,\n}: LoadingButtonProps) => (\n  <button\n    className={cx(\"loading-button\", loading && \"buttonLoading\")}\n    disabled={disabled}\n    onClick={onClick}\n    tabIndex={disabled ? -1 : 0}\n  >\n    {loading ? (\n      <>\n        <div className=\"buttonSvgLoading\">{spinnerSvg}</div>\n        <span>Loading</span>\n      </>\n    ) : (\n      value\n    )}\n  </button>\n);\n\nexport interface MenuButtonProps {\n  value: string;\n  onClick: React.MouseEventHandler;\n  reversed?: boolean;\n  disabled?: boolean;\n  index?: number;\n  hidden?: boolean;\n}\n\nexport const MenuButton = ({\n  reversed,\n  disabled,\n  onClick,\n  index,\n  value,\n  hidden,\n}: MenuButtonProps) => (\n  <button\n    className={cx(\"menu-button\", reversed && \"reversed\")}\n    disabled={disabled}\n    onClick={onClick}\n    key={index}\n    tabIndex={disabled || hidden ? -1 : 0}\n  >\n    {value}\n  </button>\n);\n\nexport const mapPropsToMenuButtons = (buttons: MenuButtonProps[]) => {\n  return buttons.map((props, index) => <MenuButton {...props} key={index} />);\n};\n\nexport enum GameButtonSize {\n  Default,\n  Small,\n}\n\nexport interface GameButtonProps {\n  value?: string;\n  onClick: () => void;\n  size?: GameButtonSize;\n  selected?: boolean;\n  icon?: JSX.Element;\n}\n\nexport const GameButton = ({\n  value,\n  icon,\n  onClick,\n  size = GameButtonSize.Default,\n  selected = false,\n}: GameButtonProps) => (\n  <button\n    className={cx(\n      \"game-button\",\n      selected && \"selected\",\n      size === GameButtonSize.Small && \"small\"\n    )}\n    onClick={onClick}\n  >\n    {value}\n    {icon}\n  </button>\n);\n\nexport const mapPropsToGameButtons = (buttons: GameButtonProps[]) => {\n  return buttons.map((props, index) => <GameButton {...props} key={index} />);\n};\n\nexport interface LinkButtonProps {\n  value: string;\n  onClick: React.MouseEventHandler;\n  disabled?: boolean;\n  textAlign?: \"left\" | \"right\" | \"center\";\n}\n\nexport const LinkButton = ({\n  onClick,\n  value,\n  disabled,\n  textAlign = \"center\",\n}: LinkButtonProps) => (\n  <button\n    className=\"link-button\"\n    disabled={disabled}\n    onClick={onClick}\n    style={{ textAlign }}\n  >\n    {value}\n  </button>\n);\n","import { TableCellsMap, CellMode, CellProps } from \"../../../consts\";\nimport { getStorageKey, LocalStorageKeys } from \"../../../utils/localStorage\";\n\n/**\n * Assigns new game values to corresponding cells.\n */\nexport const getNewCellProps = (values: number[]) => {\n  const cellProps: TableCellsMap = {};\n  values.forEach((value, key) => {\n    const isReadOnlyCell = value !== 0;\n\n    cellProps[key] = {\n      value,\n      withHighlight: false,\n      withError: false,\n      mode: isReadOnlyCell ? CellMode.ReadOnly : CellMode.Pencil,\n    };\n  });\n  return cellProps;\n};\n\n/**\n * Assigns end game values to corresponding cells.\n */\nexport const getEndgameCellProps = (\n  values: number[],\n  currentCellProps: TableCellsMap\n) => {\n  const cellProps: TableCellsMap = {};\n  values.forEach((value, key) => {\n    const isReadOnlyCell =\n      currentCellProps[key] && currentCellProps[key].mode === CellMode.ReadOnly;\n\n    cellProps[key] = {\n      value,\n      withHighlight: false,\n      withError: false,\n      mode: isReadOnlyCell ? CellMode.ReadOnly : CellMode.Pencil,\n    };\n  });\n  return cellProps;\n};\n\n/**\n * Resets highlights and updates errors if enabled in settings\n */\nexport const resetCellStatus = (\n  cellProps: TableCellsMap,\n  duplicates: number[]\n) => {\n  const newCellProps: TableCellsMap = {};\n  const disableInGameError = getStorageKey(LocalStorageKeys.DisableInGameError);\n  const disableHighlighting = getStorageKey(\n    LocalStorageKeys.DisableHighlighting\n  );\n\n  if (disableHighlighting && disableInGameError) {\n    return undefined;\n  }\n\n  for (const key in cellProps) {\n    if (cellProps.hasOwnProperty(key)) {\n      const pos = +key;\n      newCellProps[pos] = {\n        ...cellProps[pos],\n        withHighlight: false,\n        withError: disableInGameError ? false : duplicates.includes(pos),\n      };\n    }\n  }\n\n  return newCellProps;\n};\n\nexport const updateCellsCellMode = (\n  cellProps: TableCellsMap,\n  cellMode: CellMode\n) => {\n  const newCellProps: TableCellsMap = {};\n  for (const key in cellProps) {\n    if (cellProps.hasOwnProperty(key)) {\n      const props = cellProps[key];\n      newCellProps[key] = props.value ? props : { ...props, mode: cellMode };\n    }\n  }\n\n  return newCellProps;\n};\n\n/**\n * Checks if there are empty cells or in notes mode\n */\nexport const hasInvalidEndgameCells = (cellProps: TableCellsMap) => {\n  for (const key in cellProps) {\n    if (\n      (cellProps.hasOwnProperty(key) &&\n        cellProps[key].mode === CellMode.Notes) ||\n      !cellProps[key].value\n    ) {\n      return true;\n    }\n  }\n  return false;\n};\n\nexport const isCellHighlightable = (cell: CellProps) => {\n  return !!cell.value && cell.mode !== CellMode.Notes;\n};\n\nexport const canAutomaticallyUpdateNotesCells = ({\n  cellMode,\n  selectedCell,\n}: {\n  cellMode: CellMode;\n  selectedCell: CellProps;\n}) => {\n  const disableAutoNotesRemoval = getStorageKey(\n    LocalStorageKeys.DisableAutoNotesRemoval\n  );\n  return (\n    cellMode === CellMode.Pencil &&\n    selectedCell.mode === CellMode.Pencil &&\n    selectedCell.value &&\n    !disableAutoNotesRemoval\n  );\n};\n\n/**\n * Highlights pencil cells that have same value\n */\nexport const updateCellsHighlight = (\n  cellProps: TableCellsMap,\n  selectedCell: CellProps\n) => {\n  const newCellProps: TableCellsMap = {};\n\n  for (const key in cellProps) {\n    if (cellProps.hasOwnProperty(key)) {\n      const matchesValue =\n        cellProps[key].mode !== CellMode.Notes &&\n        selectedCell.value === cellProps[key].value;\n      newCellProps[key] = {\n        ...cellProps[key],\n        withHighlight: isCellHighlightable(selectedCell) && matchesValue,\n      };\n    }\n  }\n\n  return newCellProps;\n};\n\nexport const resetCellsHighlight = (cellProps: TableCellsMap) => {\n  const newCellProps: TableCellsMap = {};\n\n  for (const key in cellProps) {\n    if (cellProps.hasOwnProperty(key)) {\n      newCellProps[key] = {\n        ...cellProps[key],\n        withHighlight: false,\n      };\n    }\n  }\n\n  return newCellProps;\n};\n\nexport const resetCellsError = (cellProps: TableCellsMap) => {\n  const newCellProps: TableCellsMap = {};\n\n  for (const key in cellProps) {\n    if (cellProps.hasOwnProperty(key)) {\n      newCellProps[key] = {\n        ...cellProps[key],\n        withError: false,\n      };\n    }\n  }\n\n  return newCellProps;\n};\n","import { RootState } from \"../../../ducks/store\";\nimport { GamePhase } from \"../../../consts\";\n\nexport const getGameState = (state: RootState) => state.game;\nexport const getCellMode = (state: RootState) => state.game.cellMode;\nexport const getCellProps = (state: RootState) => state.game.cellProps;\nexport const getCellPropsById = (id: number) => (state: RootState) =>\n  state.game.cellProps[id];\nexport const getGamePhase = (state: RootState) => state.game.gamePhase;\nexport const areCellsDisabled = (state: RootState) => {\n  return [GamePhase.Win, GamePhase.GameOver].includes(getGamePhase(state));\n};\n","import { removeDuplicates } from \"../../../utils/generalUtils\";\nimport { sortByRows, sortByCols, sortByGrids } from \"../../../utils/arrayUtils\";\nimport {\n  CellMode,\n  TableCellsMap,\n  CellCoordinates,\n  GameType,\n  CellProps,\n} from \"../../../consts\";\n\nconst getDuplicateNotesCells = (\n  gameType: GameType,\n  gameRatio: number,\n  cellProps: TableCellsMap,\n  coor: CellCoordinates\n) => {\n  const notesCellsRows = sortByRows(gameType, ({ arr, row, pos }) => {\n    if (cellProps[pos].mode === CellMode.Notes && cellProps[pos].value) {\n      arr[row].push(pos);\n    }\n  });\n  const notesCellsCols = sortByCols(gameType, ({ arr, col, pos }) => {\n    if (cellProps[pos].mode === CellMode.Notes && cellProps[pos].value) {\n      arr[col].push(pos);\n    }\n  });\n  const notesCellsGrids = sortByGrids(\n    gameType,\n    gameRatio,\n    ({ arr, grid, pos }) => {\n      if (cellProps[pos].mode === CellMode.Notes && cellProps[pos].value) {\n        arr[grid].push(pos);\n      }\n    }\n  );\n  return removeDuplicates([\n    ...notesCellsRows[coor.x],\n    ...notesCellsCols[coor.y],\n    ...notesCellsGrids[coor.grid],\n  ]);\n};\n\n/**\n * Removes value from notes that match new pencil value\n */\nexport const removeDuplicateNotesCells = (\n  gameType: GameType,\n  gameRatio: number,\n  cellProps: TableCellsMap,\n  selectedCell: CellProps,\n  coor: CellCoordinates\n) => {\n  const duplicates = getDuplicateNotesCells(\n    gameType,\n    gameRatio,\n    cellProps,\n    coor\n  );\n  if (!duplicates.length) {\n    return undefined;\n  }\n\n  // Removes numbers from notes that are related to selected cell\n  const newCellProps: TableCellsMap = {};\n\n  for (const key in cellProps) {\n    if (cellProps.hasOwnProperty(key)) {\n      const props = cellProps[key];\n      let value = props.value;\n\n      if (duplicates.includes(+key)) {\n        const notes = `${value}`\n          .split(\"\")\n          .filter(val => `${selectedCell.value}` !== val)\n          .join(\"\");\n        value = +notes || 0;\n      }\n\n      newCellProps[key] = {\n        ...props,\n        value,\n      };\n    }\n  }\n\n  return newCellProps;\n};\n","import * as React from \"react\";\nimport \"./icons.less\";\n\nexport const crossSvg = (\n  <svg viewBox=\"0 0 30 30\" className=\"icon\">\n    <path\n      d={`m29.082202,23.702671c0,0 0,0 0,0l-8.702823,-8.702823l8.702823,-8.702823c0,0 0,0 0,\n      0c0.093712,-0.093712 0.161606,-0.203681 0.204637,-0.319387c0.118575,-0.318431 0.050681,\n      -0.691368 -0.205594,-0.947643l-4.110915,-4.110915c-0.256275,-0.256275 -0.629212,\n      -0.324168 -0.947643,-0.204637c-0.116662,0.043031 -0.225675,0.110925 -0.320343,0.204637c0,\n      0 0,0 0,0l-8.702823,8.702823l-8.702823,-8.702823c0,0 0,0 0,0c-0.093712,-0.093712 -0.203681,\n      -0.161606 -0.319387,-0.204637c-0.318431,-0.118575 -0.691368,-0.050681 -0.947643,0.204637l-4.110915,\n      4.110915c-0.256275,0.256275 -0.324168,0.629212 -0.205594,0.947643c0.043031,0.116662 0.110925,\n      0.225675 0.204637,0.319387c0,0 0,0 0,0l8.702823,8.702823l-8.702823,8.702823c0,0 0,0 0,0c-0.093712,\n      0.093712 -0.161606,0.203681 -0.204637,0.319387c-0.118575,0.318431 -0.050681,0.691368 0.205594,\n      0.947643l4.110915,4.110915c0.256275,0.256275 0.629212,0.324168 0.947643,0.205594c0.116662,\n      -0.043031 0.225675,-0.110925 0.319387,-0.204637c0,0 0,0 0,0l8.702823,-8.702823l8.702823,8.702823c0,\n      0 0,0 0,0c0.093712,0.093712 0.203681,0.161606 0.319387,0.204637c0.318431,0.118575 0.691368,\n      0.050681 0.947643,-0.205594l4.110915,-4.110915c0.256275,-0.256275 0.324168,-0.629212 0.205594,\n      -0.947643c-0.043031,-0.116662 -0.110925,-0.225675 -0.204637,-0.319387l0.000956,0z`}\n    ></path>\n  </svg>\n);\n\nexport const arrowSvg = (\n  <svg viewBox=\"0 0 30 30\" className=\"icon\">\n    <path d=\"m29.5315,15l-14.063,-14.063l0,8.438l-15,0l0,11.25l15,0l0,8.438l14.063,-14.063z\"></path>\n  </svg>\n);\n\nexport const checkSvg = (\n  <svg viewBox=\"0 0 30 30\" className=\"icon\">\n    <path d=\"M25.313 3.75l-14.063 14.063-6.563-6.563-4.688 4.688 11.25 11.25 18.75-18.75z\"></path>\n  </svg>\n);\n\nexport const menuSvg = (\n  <svg viewBox=\"0 5 30 22\" className=\"icon\">\n    <path d=\"M1.875 5.625h26.25v5.625h-26.25zM1.875 13.125h26.25v5.625h-26.25zM1.875 20.625h26.25v5.625h-26.25z\"></path>\n  </svg>\n);\n\nexport const spinnerSvg = (\n  <svg className=\"icon spinner\" viewBox=\"0 0 32 32\">\n    <path d=\"M16 9.472c-1.030 0-1.865-0.835-1.865-1.865v-5.596c0-1.030 0.835-1.865 1.865-1.865s1.865 0.835 1.865 1.865v5.596c0 1.030-0.835 1.865-1.865 1.865z\"></path>\n    <path d=\"M16 31.155c-0.644 0-1.166-0.522-1.166-1.166v-5.596c0-0.644 0.522-1.166 1.166-1.166s1.166 0.522 1.166 1.166v5.596c0 0.644-0.522 1.166-1.166 1.166z\"></path>\n    <path d=\"M11.805 10.48c-0.604 0-1.192-0.314-1.516-0.875l-2.798-4.846c-0.483-0.836-0.196-1.906 0.64-2.389s1.906-0.196 2.389 0.64l2.798 4.846c0.483 0.836 0.196 1.906-0.64 2.389-0.275 0.159-0.576 0.235-0.873 0.235z\"></path>\n    <path d=\"M22.995 29.164c-0.363 0-0.715-0.188-0.91-0.525l-2.798-4.846c-0.29-0.502-0.118-1.143 0.384-1.433s1.143-0.118 1.433 0.384l2.798 4.846c0.29 0.502 0.118 1.143-0.384 1.433-0.165 0.095-0.346 0.141-0.524 0.141z\"></path>\n    <path d=\"M8.729 13.436c-0.277 0-0.557-0.070-0.814-0.219l-4.846-2.798c-0.781-0.451-1.048-1.449-0.597-2.229s1.449-1.048 2.229-0.597l4.846 2.798c0.781 0.451 1.048 1.449 0.597 2.229-0.302 0.524-0.851 0.816-1.415 0.816z\"></path>\n    <path d=\"M28.114 23.927c-0.158 0-0.319-0.040-0.465-0.125l-4.846-2.798c-0.446-0.258-0.599-0.828-0.341-1.274s0.828-0.599 1.274-0.341l4.846 2.798c0.446 0.258 0.599 0.828 0.341 1.274-0.173 0.299-0.486 0.466-0.809 0.466z\"></path>\n    <path d=\"M7.607 17.515h-5.596c-0.837 0-1.516-0.678-1.516-1.515s0.678-1.515 1.516-1.515h5.596c0.837 0 1.516 0.678 1.516 1.515s-0.678 1.515-1.516 1.515z\"></path>\n    <path d=\"M29.989 16.933c-0 0 0 0 0 0h-5.596c-0.515-0-0.933-0.418-0.933-0.933s0.418-0.933 0.933-0.933c0 0 0 0 0 0h5.596c0.515 0 0.933 0.418 0.933 0.933s-0.418 0.933-0.933 0.933z\"></path>\n    <path d=\"M3.886 24.394c-0.483 0-0.954-0.251-1.213-0.7-0.386-0.669-0.157-1.525 0.512-1.911l4.846-2.798c0.669-0.387 1.525-0.157 1.911 0.512s0.157 1.525-0.512 1.911l-4.846 2.798c-0.22 0.127-0.461 0.188-0.698 0.188z\"></path>\n    <path d=\"M23.27 12.736c-0.322 0-0.636-0.167-0.809-0.466-0.258-0.446-0.105-1.016 0.341-1.274l4.846-2.798c0.446-0.257 1.016-0.105 1.274 0.341s0.105 1.016-0.341 1.274l-4.846 2.798c-0.147 0.085-0.307 0.125-0.465 0.125z\"></path>\n    <path d=\"M9.004 29.397c-0.218 0-0.438-0.055-0.64-0.172-0.613-0.354-0.823-1.138-0.469-1.752l2.798-4.846c0.354-0.613 1.138-0.823 1.752-0.469s0.823 1.138 0.469 1.752l-2.798 4.846c-0.237 0.411-0.668 0.641-1.112 0.641z\"></path>\n    <path d=\"M20.196 9.664c-0.158 0-0.319-0.040-0.465-0.125-0.446-0.258-0.599-0.828-0.341-1.274l2.798-4.846c0.258-0.446 0.828-0.599 1.274-0.341s0.599 0.828 0.341 1.274l-2.798 4.846c-0.173 0.299-0.486 0.466-0.809 0.466z\"></path>\n  </svg>\n);\n","import * as React from \"react\";\nimport cx from \"classnames\";\n\nimport \"./popup.less\";\n\nimport { GameButtonProps, mapPropsToGameButtons } from \"../buttons/Button\";\nimport { useSelector } from \"react-redux\";\nimport { getPopupProps } from \"./ducks/selectors\";\n\nexport enum PopupText {\n  Solve = \"Solve\",\n  Reset = \"Reset\",\n  Win = \"Win\",\n  Duplicates = \"Duplicates\",\n  Check = \"Check\",\n  NetworkError = \"NetworkError\",\n}\n\nconst PopupTextMap: { [key in PopupText]: JSX.Element } = {\n  [PopupText.Solve]: <span>Are you sure you want to solve?</span>,\n  [PopupText.Reset]: <span>Are you sure you want to reset?</span>,\n  [PopupText.Win]: (\n    <>\n      <span>Correct!</span>\n      <br />\n      <span>You have won the game!</span>\n    </>\n  ),\n  [PopupText.Duplicates]: <span>Some cell values are incorrect.</span>,\n  [PopupText.Check]: <span>Correct so far!</span>,\n  [PopupText.NetworkError]: (\n    <span>\n      Your network connection is down. Please check your network and try later.\n    </span>\n  ),\n};\n\nexport interface PopupProps {\n  text?: PopupText;\n  hidden: boolean;\n  buttons?: GameButtonProps[];\n}\n\nexport const Popup: React.FC = () => {\n  const { text, hidden, buttons } = useSelector(getPopupProps);\n  const isHidden = hidden || !text || !buttons;\n\n  return (\n    <div className={cx(\"message-popup\", isHidden && \"hidden\")}>\n      <div className=\"message\">{text && PopupTextMap[text]}</div>\n      <div className=\"buttons\">{buttons && mapPropsToGameButtons(buttons)}</div>\n    </div>\n  );\n};\n","import { RootState } from \"../../../ducks/store\";\n\nexport const getPopupProps = (state: RootState) => state.popup;\n","export enum SessionStorageKeys {\n  UserId = \"UserId\",\n}\n\ntype StorageKeysType = string;\n\nconst storageKeysToDefaultMap: {\n  [key in SessionStorageKeys]: StorageKeysType;\n} = {\n  [SessionStorageKeys.UserId]: \"\",\n};\n\nexport const getSessionStorageKey = (\n  key: SessionStorageKeys\n): StorageKeysType => {\n  try {\n    const value = window.sessionStorage.getItem(key);\n    if (value === null) {\n      throw new Error();\n    }\n    return JSON.parse(value);\n  } catch {\n    return storageKeysToDefaultMap[key];\n  }\n};\n\nexport const setSessionStorageKey = (\n  key: SessionStorageKeys,\n  value: StorageKeysType\n) => {\n  try {\n    window.sessionStorage.setItem(key, JSON.stringify(value));\n  } catch {\n    console.error(`Session storage: Was not able to set item in key ${key}`);\n  }\n};\n","import { ActionWithPayload, GamePhase } from \"../../../consts\";\nimport { PopupProps, PopupText } from \"../../popup/Popup\";\nimport { Action, Dispatch } from \"redux\";\nimport { GameButtonSize } from \"../../buttons/Button\";\nimport { checkSvg } from \"../../svg/Icons\";\nimport { updateGamePhase } from \"../../game-page/ducks/actions\";\n\nexport const SHOW_POPUP = \"@popup/SHOW_POPUP\";\nexport const HIDE_POPUP = \"@popup/HIDE_POPUP\";\n\nexport type ShowPopupAction = ActionWithPayload<\n  typeof SHOW_POPUP,\n  Omit<PopupProps, \"hidden\">\n>;\nexport const showPopup = (\n  payload: Omit<PopupProps, \"hidden\">\n): ShowPopupAction => ({\n  type: SHOW_POPUP,\n  payload,\n});\n\nexport type HidePopupAction = Action<typeof HIDE_POPUP>;\nexport const hidePopup = (): HidePopupAction => ({\n  type: HIDE_POPUP,\n});\n\nexport const showWinPopup = (dispatch: Dispatch) => {\n  dispatch(\n    showPopup({\n      text: PopupText.Win,\n      buttons: [\n        {\n          size: GameButtonSize.Small,\n          icon: checkSvg,\n          onClick: () => dispatch(hidePopup()),\n        },\n      ],\n    })\n  );\n};\n\nexport const showCheckPopup = (dispatch: Dispatch, hasDuplicates: boolean) => {\n  dispatch(\n    showPopup({\n      text: hasDuplicates ? PopupText.Duplicates : PopupText.Check,\n      buttons: [\n        {\n          size: GameButtonSize.Small,\n          icon: checkSvg,\n          onClick: () => dispatch(hidePopup()),\n        },\n      ],\n    })\n  );\n};\n\nexport const showResetPopup = (dispatch: Dispatch<any>) => {\n  dispatch(\n    showPopup({\n      text: PopupText.Reset,\n      buttons: [\n        {\n          size: GameButtonSize.Small,\n          value: \"Yes\",\n          onClick: () => dispatch(updateGamePhase(GamePhase.New)),\n        },\n        {\n          size: GameButtonSize.Small,\n          value: \"No\",\n          onClick: () => dispatch(hidePopup()),\n        },\n      ],\n    })\n  );\n};\n\nexport const showSolvePopup = (dispatch: Dispatch<any>) => {\n  dispatch(\n    showPopup({\n      text: PopupText.Solve,\n      buttons: [\n        {\n          size: GameButtonSize.Small,\n          value: \"Yes\",\n          onClick: () => dispatch(updateGamePhase(GamePhase.GameOver)),\n        },\n        {\n          size: GameButtonSize.Small,\n          value: \"No\",\n          onClick: () => dispatch(hidePopup()),\n        },\n      ],\n    })\n  );\n};\n","import {\n  ActionWithPayload,\n  TableCellsMap,\n  AppThunk,\n  CellCoordinates,\n  CellMode,\n  CellProps,\n  GamePhase,\n} from \"../../../consts\";\nimport { Action } from \"redux\";\nimport { Game } from \"../../../generator/generator\";\nimport { getDuplicates } from \"../helpers/gameTable\";\nimport { getCurrentGame } from \"../../app/ducks/selectors\";\nimport {\n  hasInvalidEndgameCells,\n  getNewCellProps,\n  getEndgameCellProps,\n  canAutomaticallyUpdateNotesCells,\n  resetCellStatus,\n} from \"../helpers/helpers\";\nimport { State } from \"./reducer\";\nimport { getCellProps, getCellMode } from \"./selectors\";\nimport { removeDuplicateNotesCells } from \"../helpers/gameNotesCells\";\nimport { removeDuplicates } from \"../../../utils/generalUtils\";\nimport { showWinPopup, showCheckPopup } from \"../../popup/ducks/actions\";\n\nexport const TOGGLE_CELL_MODE = \"@game/TOGGLE_CELL_MODE\";\nexport const SET_CELL_PROPS = \"@game/SET_CELL_PROPS\";\nexport const RESET_GAME_TOOLS = \"@game/RESET_GAME_TOOLS\";\nexport const HIGHLIGHT_CELLS = \"@game/HIGHLIGHT_CELLS\";\nexport const RESET_HIGHLIGHT_CELLS = \"@game/RESET_HIGHLIGHT_CELLS\";\nexport const RESET_ERROR_CELLS = \"@game/RESET_ERROR_CELLS\";\nexport const SET_GAME_PHASE = \"@game/SET_GAME_PHASE\";\nexport const SET_CELL_VALUE = \"@game/SET_CELL_VALUE\";\nexport const SET_GAME_STATE = \"@game/SET_GAME_STATE\";\n\nexport type ToggleCellModeAction = Action<typeof TOGGLE_CELL_MODE>;\nexport const toggleCellMode = (): ToggleCellModeAction => ({\n  type: TOGGLE_CELL_MODE,\n});\n\nexport type SetCellPropsAction = ActionWithPayload<\n  typeof SET_CELL_PROPS,\n  TableCellsMap\n>;\nexport const setCellProps = (payload: TableCellsMap): SetCellPropsAction => ({\n  type: SET_CELL_PROPS,\n  payload,\n});\n\nexport type ResetGameToolsAction = Action<typeof RESET_GAME_TOOLS>;\nexport const resetGameTools = (): ResetGameToolsAction => ({\n  type: RESET_GAME_TOOLS,\n});\n\nexport type HighLightCellsAction = ActionWithPayload<\n  typeof HIGHLIGHT_CELLS,\n  CellProps\n>;\nexport const highLightCells = (payload: CellProps): HighLightCellsAction => ({\n  type: HIGHLIGHT_CELLS,\n  payload,\n});\n\nexport type ResetHighLightCellsAction = Action<typeof RESET_HIGHLIGHT_CELLS>;\nexport const resetHighLightCells = (): ResetHighLightCellsAction => ({\n  type: RESET_HIGHLIGHT_CELLS,\n});\n\nexport type ResetErrorCellsAction = Action<typeof RESET_ERROR_CELLS>;\nexport const resetErrorCells = (): ResetErrorCellsAction => ({\n  type: RESET_ERROR_CELLS,\n});\n\nexport type SetGamePhaseAction = ActionWithPayload<\n  typeof SET_GAME_PHASE,\n  GamePhase\n>;\nexport const setGamePhase = (payload: GamePhase): SetGamePhaseAction => ({\n  type: SET_GAME_PHASE,\n  payload,\n});\n\nexport type SetGameStateAction = ActionWithPayload<\n  typeof SET_GAME_STATE,\n  State\n>;\nexport const setGameState = (payload: State): SetGameStateAction => ({\n  type: SET_GAME_STATE,\n  payload,\n});\n\nexport type SetCellValueAction = ActionWithPayload<\n  typeof SET_CELL_VALUE,\n  { pos: number; value: number }\n>;\nexport const setCellValue = (payload: {\n  pos: number;\n  value: number;\n}): SetCellValueAction => ({\n  type: SET_CELL_VALUE,\n  payload,\n});\n\nexport const updateGamePhase = (phase: GamePhase): AppThunk => (\n  dispatch,\n  getState\n) => {\n  const game = getCurrentGame(getState());\n  const cellProps = getCellProps(getState());\n\n  if (phase === GamePhase.New && game) {\n    dispatch(setCellProps(getNewCellProps(game.mask)));\n    dispatch(resetGameTools());\n  } else if (phase === GamePhase.GameOver && game) {\n    dispatch(setCellProps(getEndgameCellProps(game.matrix, cellProps)));\n    dispatch(resetGameTools());\n  } else if (phase === GamePhase.Win) {\n    dispatch(resetGameTools());\n    showWinPopup(dispatch);\n  }\n\n  dispatch(setGamePhase(phase));\n};\n\nexport const checkForWin = (): AppThunk => (dispatch, getState) => {\n  const game = getCurrentGame(getState()) as Game;\n  const cellProps = getCellProps(getState());\n\n  // Finds pencil mode cell duplicates from rows, cols and grids\n  const duplicates = getDuplicates(cellProps, game.gameType, game.ratio);\n\n  const hasInvalidCells = hasInvalidEndgameCells(cellProps);\n\n  // displays win message if conditions are met\n  if (duplicates.length === 0 && !hasInvalidCells) {\n    dispatch(updateGamePhase(GamePhase.Win));\n  } else {\n    showCheckPopup(dispatch, !!duplicates.length);\n  }\n};\n\nexport const updatePencilCells = (): AppThunk => (dispatch, getState) => {\n  const game = getCurrentGame(getState()) as Game;\n  const cellProps = getCellProps(getState());\n\n  // Finds pencil mode cell duplicates from rows, cols and grids\n  const duplicates = getDuplicates(cellProps, game.gameType, game.ratio);\n\n  // Resets highlights and updates errors if enabled in settings\n  const newCellProps = resetCellStatus(cellProps, duplicates);\n  if (newCellProps) {\n    dispatch(setCellProps(newCellProps));\n  }\n\n  const hasInvalidCells = hasInvalidEndgameCells(cellProps);\n\n  // displays win message if conditions are met\n  if (duplicates.length === 0 && !hasInvalidCells) {\n    dispatch(updateGamePhase(GamePhase.Win));\n  }\n};\n\nexport const updateNotesCells = (coor: CellCoordinates): AppThunk => (\n  dispatch,\n  getState\n) => {\n  const state = getState();\n  const game = getCurrentGame(state) as Game;\n  const cellProps = getCellProps(state);\n  const cellMode = getCellMode(state);\n\n  const pos = coor.x * game.gameType + coor.y;\n  const props = cellProps[pos];\n\n  if (!canAutomaticallyUpdateNotesCells({ cellMode, selectedCell: props })) {\n    return;\n  }\n\n  const newCellProps = removeDuplicateNotesCells(\n    game.gameType,\n    game.ratio,\n    cellProps,\n    props,\n    coor\n  );\n\n  if (!newCellProps) {\n    return;\n  }\n\n  dispatch(setCellProps(newCellProps));\n};\n\nexport const updateCellValue = (pos: number, value: string): AppThunk => (\n  dispatch,\n  getState\n) => {\n  if (value === \"\") {\n    dispatch(setCellValue({ pos, value: 0 }));\n    return;\n  }\n\n  if (value.match(/^[1-9]+$/g)) {\n    const cellMode = getCellMode(getState());\n    let newValue: number;\n\n    if (cellMode === CellMode.Pencil) {\n      newValue = +value || 0;\n    } else {\n      const notes = removeDuplicates(\n        value\n          .split(\"\")\n          .map(val => +val)\n          .sort()\n      ).join(\"\");\n      newValue = +notes || 0;\n    }\n\n    dispatch(setCellValue({ pos, value: newValue }));\n    return;\n  }\n};\n","import { Reducer } from \"redux\";\nimport { CellMode, TableCellsMap, GamePhase } from \"../../../consts\";\nimport {\n  ToggleCellModeAction,\n  SetCellPropsAction,\n  TOGGLE_CELL_MODE,\n  SET_CELL_PROPS,\n  ResetGameToolsAction,\n  RESET_GAME_TOOLS,\n  SetGamePhaseAction,\n  SET_GAME_PHASE,\n  HighLightCellsAction,\n  HIGHLIGHT_CELLS,\n  SetCellValueAction,\n  SET_CELL_VALUE,\n  SetGameStateAction,\n  SET_GAME_STATE,\n  RESET_HIGHLIGHT_CELLS,\n  ResetHighLightCellsAction,\n  RESET_ERROR_CELLS,\n  ResetErrorCellsAction,\n} from \"./actions\";\nimport {\n  SET_CURRENT_GAME,\n  SetCurrentGameAction,\n} from \"../../app/ducks/actions\";\nimport {\n  updateCellsCellMode,\n  updateCellsHighlight,\n  resetCellsHighlight,\n  resetCellsError,\n} from \"../helpers/helpers\";\nimport { getStorageKey, LocalStorageKeys } from \"../../../utils/localStorage\";\n\nexport interface State {\n  cellMode: CellMode;\n  cellProps: TableCellsMap;\n  gamePhase: GamePhase;\n}\n\ntype Actions =\n  | ToggleCellModeAction\n  | SetCellPropsAction\n  | SetCurrentGameAction\n  | ResetGameToolsAction\n  | HighLightCellsAction\n  | SetGamePhaseAction\n  | SetCellValueAction\n  | SetGameStateAction\n  | ResetHighLightCellsAction\n  | ResetErrorCellsAction;\n\nexport const initialState: State = {\n  cellMode: CellMode.Pencil,\n  cellProps: {},\n  gamePhase: GamePhase.New,\n};\n\nexport const gameReducer: Reducer<State, Actions> = (\n  state = initialState,\n  action\n) => {\n  const { cellMode, cellProps } = state;\n\n  // ATTENTION: New actions added to reducer should also be added to save middleware\n  switch (action.type) {\n    case TOGGLE_CELL_MODE: {\n      const newCellMode =\n        cellMode === CellMode.Pencil ? CellMode.Notes : CellMode.Pencil;\n      return {\n        ...state,\n        cellMode: newCellMode,\n        cellProps: updateCellsCellMode(cellProps, newCellMode),\n      };\n    }\n    case HIGHLIGHT_CELLS: {\n      const disableHighlighting = getStorageKey(\n        LocalStorageKeys.DisableHighlighting\n      );\n      if (disableHighlighting) {\n        return state;\n      }\n\n      return {\n        ...state,\n        cellProps: updateCellsHighlight(cellProps, action.payload),\n      };\n    }\n    case RESET_HIGHLIGHT_CELLS: {\n      return {\n        ...state,\n        cellProps: resetCellsHighlight(cellProps),\n      };\n    }\n    case RESET_ERROR_CELLS: {\n      return {\n        ...state,\n        cellProps: resetCellsError(cellProps),\n      };\n    }\n    case SET_CELL_VALUE: {\n      const { pos, value } = action.payload;\n      const props = state.cellProps[pos];\n\n      return {\n        ...state,\n        cellProps: {\n          ...state.cellProps,\n          [pos]: {\n            ...props,\n            value,\n            mode: state.cellMode,\n          },\n        },\n      };\n    }\n    case SET_GAME_PHASE: {\n      return {\n        ...state,\n        gamePhase: action.payload,\n      };\n    }\n    case SET_CELL_PROPS: {\n      return {\n        ...state,\n        cellProps: action.payload,\n      };\n    }\n    case RESET_GAME_TOOLS: {\n      return {\n        ...state,\n        cellMode: CellMode.Pencil,\n      };\n    }\n    case SET_GAME_STATE: {\n      return action.payload;\n    }\n    case SET_CURRENT_GAME: {\n      return initialState;\n    }\n    default: {\n      return state;\n    }\n  }\n};\n","import { MenuContentSectionProps } from \"./MenuContentSection\";\n\nexport enum MenuSection {\n  Stats = \"Stats\",\n  Settings = \"Settings\",\n  Rules = \"Rules\",\n  About = \"About\",\n  Contacts = \"Contacts\",\n}\n\nexport type SharedSectionProps = Pick<\n  MenuContentSectionProps,\n  \"crossOnClick\" | \"arrowOnClick\"\n>;\n","import { ActionWithPayload } from \"../../../consts\";\nimport { Action } from \"redux\";\n\nexport const SET_USERNAME = \"@loginForm/SET_USERNAME\";\nexport const SET_PASSWORD = \"@loginForm/SET_PASSWORD\";\nexport const SET_CONFIRM_PASSWORD = \"@loginForm/SET_CONFIRM_PASSWORD\";\nexport const SET_FORM_ERROR = \"@loginForm/SET_FORM_ERROR\";\nexport const SET_FORM_LOADING = \"@loginForm/SET_FORM_LOADING\";\nexport const TOGGLE_FORM_TYPE = \"@loginForm/TOGGLE_FORM_TYPE\";\nexport const OPEN_FORM = \"@loginForm/OPEN_FORM\";\nexport const CLOSE_FORM = \"@loginForm/CLOSE_FORM\";\n\nexport type SetUsernameAction = ActionWithPayload<typeof SET_USERNAME, string>;\nexport const setUsername = (payload: string): SetUsernameAction => ({\n  type: SET_USERNAME,\n  payload,\n});\n\nexport type SetPasswordAction = ActionWithPayload<typeof SET_PASSWORD, string>;\nexport const setPassword = (payload: string): SetPasswordAction => ({\n  type: SET_PASSWORD,\n  payload,\n});\n\nexport type SetConfirmPasswordAction = ActionWithPayload<\n  typeof SET_CONFIRM_PASSWORD,\n  string\n>;\nexport const setConfirmPassword = (\n  payload: string\n): SetConfirmPasswordAction => ({\n  type: SET_CONFIRM_PASSWORD,\n  payload,\n});\n\nexport type SetFormErrorAction = ActionWithPayload<\n  typeof SET_FORM_ERROR,\n  string\n>;\nexport const setFormError = (payload: string): SetFormErrorAction => ({\n  type: SET_FORM_ERROR,\n  payload,\n});\n\nexport type SetFormLoadingAction = ActionWithPayload<\n  typeof SET_FORM_LOADING,\n  boolean\n>;\nexport const setFormLoading = (payload: boolean): SetFormLoadingAction => ({\n  type: SET_FORM_LOADING,\n  payload,\n});\n\nexport type ToggleFormTypeAction = Action<typeof TOGGLE_FORM_TYPE>;\nexport const toggleFormType = (): ToggleFormTypeAction => ({\n  type: TOGGLE_FORM_TYPE,\n});\n\nexport type OpenFormAction = ActionWithPayload<\n  typeof OPEN_FORM,\n  \"Register\" | \"Login\"\n>;\nexport const openForm = (payload: \"Register\" | \"Login\"): OpenFormAction => ({\n  type: OPEN_FORM,\n  payload,\n});\n\nexport type CloseFormAction = Action<typeof CLOSE_FORM>;\nexport const closeForm = (): CloseFormAction => ({\n  type: CLOSE_FORM,\n});\n","import { SavedGame, saveGame } from \"../components/app/ducks/requests\";\nimport { setStorageKey, LocalStorageKeys } from \"./localStorage\";\n\nexport const saveToDatabaseOrStorage = async (\n  payload: SavedGame,\n  userId: string | undefined\n) => {\n  if (userId) {\n    const { data, status } = await saveGame({ ...payload, id: userId });\n    if (data.type === \"fail\") {\n      throw { ...data, status };\n    }\n  } else {\n    setStorageKey(LocalStorageKeys.CurrentGame, payload);\n  }\n};\n","import {\n  Page,\n  ActionWithPayload,\n  AppThunk,\n  GameConfig,\n  GamePhase,\n  User,\n  RequestError,\n} from \"../../../consts\";\nimport { Game } from \"../../../generator/generator\";\nimport { MenuSection } from \"../../menu-content/types\";\nimport { registerUser, getUser, getUserFromId, UserData } from \"./requests\";\nimport { getCurrentGame, getUserId } from \"./selectors\";\nimport { initialState } from \"../../game-page/ducks/reducer\";\nimport { getGameState } from \"../../game-page/ducks/selectors\";\nimport { setGameState, updateGamePhase } from \"../../game-page/ducks/actions\";\nimport {\n  setSessionStorageKey,\n  SessionStorageKeys,\n  getSessionStorageKey,\n} from \"../../../utils/sessionStorage\";\nimport { setFormError } from \"../../login-form/ducks/actions\";\nimport { saveToDatabaseOrStorage } from \"../../../utils/saveToDatabaseOrStorage\";\nimport { getStorageKey, LocalStorageKeys } from \"../../../utils/localStorage\";\nimport { SavedGame } from \"./requests\";\n\nexport const SET_PAGE = \"@app/SET_PAGE\";\nexport const SET_CURRENT_GAME = \"@app/SET_CURRENT_GAME\";\nexport const SET_LOBBY_IS_LOADING = \"@app/SET_LOBBY_IS_LOADING\";\nexport const SET_LOBBY_HAS_ERROR = \"@app/SET_LOBBY_HAS_ERROR\";\nexport const SET_LOBBY_MENU_SECTION = \"@app/SET_LOBBY_MENU_SECTION\";\nexport const SET_ERROR = \"@app/SET_ERROR\";\nexport const REMOVE_ERROR = \"@app/REMOVE_ERROR\";\nexport const SET_USER = \"@app/SET_USER\";\n\nexport type SetPageAction = ActionWithPayload<typeof SET_PAGE, Page>;\nexport const setPage = (payload: Page): SetPageAction => ({\n  type: SET_PAGE,\n  payload,\n});\n\nexport type SetCurrentGameAction = ActionWithPayload<\n  typeof SET_CURRENT_GAME,\n  Game\n>;\nexport const setCurrentGame = (payload: Game): SetCurrentGameAction => ({\n  type: SET_CURRENT_GAME,\n  payload,\n});\n\nexport type SetLobbyIsLoadingAction = ActionWithPayload<\n  typeof SET_LOBBY_IS_LOADING,\n  boolean\n>;\nexport const setLobbyIsLoading = (\n  payload: boolean\n): SetLobbyIsLoadingAction => ({\n  type: SET_LOBBY_IS_LOADING,\n  payload,\n});\n\nexport type SetLobbyHasErrorAction = ActionWithPayload<\n  typeof SET_LOBBY_HAS_ERROR,\n  boolean\n>;\nexport const setLobbyHasError = (payload: boolean): SetLobbyHasErrorAction => ({\n  type: SET_LOBBY_HAS_ERROR,\n  payload,\n});\n\nexport type SetLobbyMenuSectionAction = ActionWithPayload<\n  typeof SET_LOBBY_MENU_SECTION,\n  MenuSection | undefined\n>;\nexport const setLobbyMenuSection = (\n  payload?: MenuSection\n): SetLobbyMenuSectionAction => ({\n  type: SET_LOBBY_MENU_SECTION,\n  payload,\n});\n\nexport type SetErrorAction = ActionWithPayload<typeof SET_ERROR, RequestError>;\nexport const setError = (payload: Error | RequestError): SetErrorAction => {\n  return {\n    type: SET_ERROR,\n    payload,\n  };\n};\n\nexport type RemoveErrorAction = ActionWithPayload<\n  typeof REMOVE_ERROR,\n  Pick<RequestError, \"message\">\n>;\nexport const removeError = (\n  payload: Pick<RequestError, \"message\">\n): RemoveErrorAction => ({\n  type: REMOVE_ERROR,\n  payload,\n});\n\nexport type SetUserAction = ActionWithPayload<typeof SET_USER, User>;\nexport const setUser = (payload: User) => ({\n  type: SET_USER,\n  payload,\n});\n\n// THUNKS\nconst initLoggedInUserInfo = (user: UserData): AppThunk => dispatch => {\n  const { gameConfig, gameState, username, _id: id } = user;\n\n  if (gameConfig && gameState) {\n    dispatch(setCurrentGame(gameConfig));\n    dispatch(\n      setGameState({\n        ...gameState,\n        cellProps: JSON.parse(gameState.cellProps),\n      })\n    );\n  }\n\n  dispatch(setUser({ id, username }));\n};\n\nconst initGuestUserInfo = ({\n  config,\n  state,\n}: SavedGame): AppThunk => dispatch => {\n  if (config && state) {\n    dispatch(setCurrentGame(config));\n    dispatch(\n      setGameState({\n        ...state,\n        cellProps: JSON.parse(state.cellProps),\n      })\n    );\n  }\n};\n\nexport const findUser = (): AppThunk => async dispatch => {\n  dispatch(setLobbyIsLoading(true));\n\n  const userId = getSessionStorageKey(SessionStorageKeys.UserId);\n  const storageGame = getStorageKey(LocalStorageKeys.CurrentGame) as\n    | SavedGame\n    | undefined;\n\n  try {\n    if (userId) {\n      const { data, status } = await getUserFromId(userId);\n\n      if (data.type === \"fail\") {\n        throw { ...data, status };\n      }\n      dispatch(initLoggedInUserInfo(data.user));\n    } else if (storageGame) {\n      dispatch(initGuestUserInfo(storageGame));\n    }\n\n    dispatch(setLobbyIsLoading(false));\n  } catch (error) {\n    dispatch(setError(error));\n    setSessionStorageKey(SessionStorageKeys.UserId, \"\");\n    dispatch(setLobbyIsLoading(false));\n  }\n};\n\nexport const loginUser = (\n  username: string,\n  password: string,\n  isNewUser: boolean\n): AppThunk => async dispatch => {\n  try {\n    const { data, status } = isNewUser\n      ? await registerUser(username, password)\n      : await getUser(username, password);\n\n    if (data.type === \"fail\") {\n      throw { ...data, status };\n    }\n\n    dispatch(initLoggedInUserInfo(data.user));\n    setSessionStorageKey(SessionStorageKeys.UserId, data.user._id);\n  } catch (error) {\n    if (error.isValidationError) {\n      dispatch(setFormError(error.message));\n    } else {\n      dispatch(setError(error));\n      dispatch(setLobbyHasError(true));\n    }\n  }\n};\n\nexport const startNewGame = (props: GameConfig): AppThunk => async (\n  dispatch,\n  getState\n) => {\n  dispatch(setLobbyIsLoading(true));\n  const userId = getUserId(getState());\n\n  const config = new Game(props);\n\n  try {\n    await saveToDatabaseOrStorage(\n      {\n        config,\n        state: {\n          ...initialState,\n          cellProps: JSON.stringify(initialState.cellProps),\n        },\n      },\n      userId\n    );\n\n    dispatch(setCurrentGame(config));\n    dispatch(updateGamePhase(GamePhase.New));\n    dispatch(setLobbyIsLoading(false));\n    dispatch(setPage(Page.Game));\n  } catch (error) {\n    dispatch(setError(error));\n    dispatch(setLobbyIsLoading(false));\n    dispatch(setLobbyHasError(true));\n  }\n};\n\nexport const continueGame = (): AppThunk => dispatch => {\n  dispatch(setPage(Page.Game));\n};\n\nexport const save = (): AppThunk => async (dispatch, getState) => {\n  const state = getState();\n  const config = getCurrentGame(state);\n  const gameState = getGameState(state);\n  const userId = getUserId(state);\n\n  if (!config) {\n    console.error(`Cannot save game. There is no ongoing game to save`);\n    return;\n  }\n\n  try {\n    await saveToDatabaseOrStorage(\n      {\n        config,\n        state: {\n          ...gameState,\n          cellProps: JSON.stringify(gameState.cellProps),\n        },\n      },\n      userId\n    );\n  } catch (error) {\n    dispatch(setError(error));\n  }\n};\n","import { Reducer } from \"redux\";\nimport { Game } from \"../../../generator/generator\";\nimport { Page, User, RequestError } from \"../../../consts\";\nimport {\n  SetPageAction,\n  SetCurrentGameAction,\n  SetLobbyHasErrorAction,\n  SetLobbyIsLoadingAction,\n  SetLobbyMenuSectionAction,\n  SET_CURRENT_GAME,\n  SET_PAGE,\n  SET_LOBBY_IS_LOADING,\n  SET_LOBBY_HAS_ERROR,\n  SET_LOBBY_MENU_SECTION,\n  SetErrorAction,\n  RemoveErrorAction,\n  SET_ERROR,\n  REMOVE_ERROR,\n  SetUserAction,\n  SET_USER,\n} from \"./actions\";\nimport { MenuSection } from \"../../menu-content/types\";\n\ninterface State {\n  page: Page;\n  currentGame: Game | undefined;\n  lobbyIsLoading: boolean;\n  lobbyHasError: boolean;\n  lobbyMenuSection: MenuSection | undefined;\n  errors: RequestError[];\n  user: User | null;\n}\n\ntype Actions =\n  | SetPageAction\n  | SetCurrentGameAction\n  | SetLobbyHasErrorAction\n  | SetLobbyIsLoadingAction\n  | SetLobbyMenuSectionAction\n  | SetErrorAction\n  | RemoveErrorAction\n  | SetUserAction;\n\nconst initialState: State = {\n  page: Page.Menu,\n  currentGame: undefined,\n  lobbyIsLoading: false,\n  lobbyHasError: false,\n  lobbyMenuSection: undefined,\n  errors: [],\n  user: null,\n};\n\nexport const appReducer: Reducer<State, Actions> = (\n  state = initialState,\n  action\n) => {\n  switch (action.type) {\n    case SET_PAGE: {\n      return { ...state, page: action.payload };\n    }\n    case SET_CURRENT_GAME: {\n      return { ...state, currentGame: action.payload };\n    }\n    case SET_LOBBY_HAS_ERROR: {\n      return { ...state, lobbyHasError: action.payload };\n    }\n    case SET_LOBBY_IS_LOADING: {\n      return { ...state, lobbyIsLoading: action.payload };\n    }\n    case SET_LOBBY_MENU_SECTION: {\n      return { ...state, lobbyMenuSection: action.payload };\n    }\n    case SET_ERROR: {\n      return {\n        ...state,\n        errors: [\n          action.payload,\n          ...state.errors.filter(\n            error => error.message !== action.payload.message\n          ),\n        ],\n      };\n    }\n    case REMOVE_ERROR: {\n      return {\n        ...state,\n        errors: state.errors.filter(\n          error => error.message !== action.payload.message\n        ),\n      };\n    }\n    case SET_USER: {\n      return {\n        ...state,\n        user: action.payload,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n","import { Reducer } from \"redux\";\nimport {\n  ShowPopupAction,\n  SHOW_POPUP,\n  HIDE_POPUP,\n  HidePopupAction,\n} from \"./actions\";\nimport { PopupProps } from \"../../popup/Popup\";\nimport {\n  SET_CURRENT_GAME,\n  SetCurrentGameAction,\n} from \"../../app/ducks/actions\";\nimport {\n  ResetGameToolsAction,\n  RESET_GAME_TOOLS,\n} from \"../../game-page/ducks/actions\";\n\ntype State = PopupProps;\n\ntype Actions =\n  | ShowPopupAction\n  | HidePopupAction\n  | SetCurrentGameAction\n  | ResetGameToolsAction;\n\nconst initialState: State = {\n  hidden: true,\n};\n\nexport const popupReducer: Reducer<State, Actions> = (\n  state = initialState,\n  action\n) => {\n  switch (action.type) {\n    case SHOW_POPUP:\n      return {\n        ...action.payload,\n        hidden: false,\n      };\n    case HIDE_POPUP:\n      return {\n        ...state,\n        hidden: true,\n      };\n    case RESET_GAME_TOOLS:\n      return {\n        ...state,\n        hidden: true,\n      };\n    case SET_CURRENT_GAME:\n      return initialState;\n    default:\n      return state;\n  }\n};\n","import { Reducer } from \"redux\";\nimport { ToggleSideMenuAction, TOGGLE_SIDE_MENU } from \"./actions\";\nimport {\n  SET_CURRENT_GAME,\n  SetCurrentGameAction,\n} from \"../../app/ducks/actions\";\nimport {\n  ResetGameToolsAction,\n  RESET_GAME_TOOLS,\n} from \"../../game-page/ducks/actions\";\n\ninterface State {\n  isOpen: boolean;\n}\n\ntype Actions =\n  | ToggleSideMenuAction\n  | SetCurrentGameAction\n  | ResetGameToolsAction;\n\nconst initialState: State = {\n  isOpen: false,\n};\n\nexport const sideMenuReducer: Reducer<State, Actions> = (\n  state = initialState,\n  action\n) => {\n  switch (action.type) {\n    case TOGGLE_SIDE_MENU:\n      return { ...state, isOpen: !state.isOpen };\n    case RESET_GAME_TOOLS:\n      return {\n        ...state,\n        isOpen: false,\n      };\n    case SET_CURRENT_GAME:\n      return initialState;\n    default:\n      return state;\n  }\n};\n","import debounce from \"lodash.debounce\";\nimport { AppThunkMiddleware } from \"../../consts\";\nimport {\n  TOGGLE_CELL_MODE,\n  HIGHLIGHT_CELLS,\n  SET_CELL_VALUE,\n  SET_GAME_PHASE,\n  SET_CELL_PROPS,\n  RESET_GAME_TOOLS,\n  SET_GAME_STATE,\n  RESET_HIGHLIGHT_CELLS,\n  RESET_ERROR_CELLS,\n} from \"../../components/game-page/ducks/actions\";\nimport { SET_CURRENT_GAME, save } from \"../../components/app/ducks/actions\";\n\nconst shouldSaveOnActions = [\n  TOGGLE_CELL_MODE,\n  HIGHLIGHT_CELLS,\n  SET_CELL_VALUE,\n  SET_GAME_PHASE,\n  SET_CELL_PROPS,\n  RESET_GAME_TOOLS,\n  SET_GAME_STATE,\n  SET_CURRENT_GAME,\n  RESET_HIGHLIGHT_CELLS,\n  RESET_ERROR_CELLS,\n];\n\nconst withDebounce = debounce(func => func(), 1000, {\n  leading: false,\n  trailing: true,\n});\n\nexport const autoSave: AppThunkMiddleware = ({\n  dispatch,\n}) => next => action => {\n  if (shouldSaveOnActions.includes(action.type)) {\n    withDebounce(() => dispatch(save()));\n  }\n\n  return next(action);\n};\n","import { Reducer } from \"redux\";\nimport {\n  SetUsernameAction,\n  SetPasswordAction,\n  SetConfirmPasswordAction,\n  SetFormErrorAction,\n  SetFormLoadingAction,\n  ToggleFormTypeAction,\n  SET_USERNAME,\n  SET_PASSWORD,\n  SET_CONFIRM_PASSWORD,\n  SET_FORM_ERROR,\n  SET_FORM_LOADING,\n  TOGGLE_FORM_TYPE,\n  OPEN_FORM,\n  OpenFormAction,\n  CLOSE_FORM,\n  CloseFormAction,\n} from \"./actions\";\n\ninterface State {\n  username: string;\n  password: string;\n  confirmPassword: string;\n  formError: string;\n  formIsLoading: boolean;\n  formType: \"Login\" | \"Register\";\n  isFormOpen: boolean;\n}\n\ntype Actions =\n  | SetUsernameAction\n  | SetPasswordAction\n  | SetConfirmPasswordAction\n  | SetFormErrorAction\n  | SetFormLoadingAction\n  | ToggleFormTypeAction\n  | OpenFormAction\n  | CloseFormAction;\n\nconst initialState: State = {\n  username: \"\",\n  password: \"\",\n  confirmPassword: \"\",\n  formError: \"\",\n  formIsLoading: false,\n  formType: \"Login\",\n  isFormOpen: false,\n};\n\nexport const loginFormReducer: Reducer<State, Actions> = (\n  state = initialState,\n  action\n) => {\n  switch (action.type) {\n    case SET_USERNAME:\n      return {\n        ...state,\n        username: action.payload,\n        formError: \"\",\n      };\n    case SET_PASSWORD:\n      return {\n        ...state,\n        password: action.payload,\n        formError: \"\",\n      };\n    case SET_CONFIRM_PASSWORD:\n      return {\n        ...state,\n        confirmPassword: action.payload,\n        formError: \"\",\n      };\n    case SET_FORM_ERROR:\n      return {\n        ...state,\n        formError: action.payload,\n      };\n    case SET_FORM_LOADING:\n      return {\n        ...state,\n        formIsLoading: action.payload,\n      };\n    case TOGGLE_FORM_TYPE:\n      return {\n        ...initialState,\n        isFormOpen: true,\n        formType: state.formType === \"Login\" ? \"Register\" : \"Login\",\n      };\n    case OPEN_FORM:\n      return {\n        ...initialState,\n        isFormOpen: true,\n        formType: action.payload,\n      };\n    case CLOSE_FORM:\n      return {\n        ...initialState,\n      };\n    default:\n      return state;\n  }\n};\n","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { appReducer } from \"../components/app/ducks/reducer\";\nimport { gameReducer } from \"../components/game-page/ducks/reducer\";\nimport { popupReducer } from \"../components/popup/ducks/reducer\";\nimport { sideMenuReducer } from \"../components/side-menu/ducks/reducer\";\nimport { network } from \"./middlewares/network\";\nimport { autoSave } from \"./middlewares/autoSave\";\nimport { loginFormReducer } from \"../components/login-form/ducks/reducer\";\n\nexport const rootReducer = combineReducers({\n  app: appReducer,\n  game: gameReducer,\n  popup: popupReducer,\n  sideMenu: sideMenuReducer,\n  loginForm: loginFormReducer,\n});\n\nconst middlewares = [thunk, network, autoSave];\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nconst composeEnhancers = process.env.NODE_ENV\n  ? (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n  : compose;\n\nexport const store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(...middlewares))\n);\n","import { Action } from \"redux\";\n\nexport const TOGGLE_SIDE_MENU = \"@sideMenu/TOGGLE_SIDE_MENU\";\n\nexport type ToggleSideMenuAction = Action<typeof TOGGLE_SIDE_MENU>;\nexport const toggleSideMenu = (): ToggleSideMenuAction => ({\n  type: TOGGLE_SIDE_MENU,\n});\n","import { AppMiddleware } from \"../../consts\";\nimport { isNetworkError } from \"../../utils/server\";\nimport { showPopup, hidePopup } from \"../../components/popup/ducks/actions\";\nimport { removeError, SET_ERROR } from \"../../components/app/ducks/actions\";\nimport { PopupText } from \"../../components/popup/Popup\";\nimport { GameButtonSize } from \"../../components/buttons/Button\";\nimport { checkSvg } from \"../../components/svg/Icons\";\n\nexport const network: AppMiddleware = ({ dispatch }) => next => action => {\n  if (action.type === SET_ERROR && isNetworkError(action.payload.message)) {\n    dispatch(\n      showPopup({\n        text: PopupText.NetworkError,\n        buttons: [\n          {\n            size: GameButtonSize.Small,\n            icon: checkSvg,\n            onClick: () => {\n              dispatch(hidePopup());\n              dispatch(removeError({ message: action.payload.message }));\n            },\n          },\n        ],\n      })\n    );\n  }\n\n  return next(action);\n};\n","import { setSessionStorageKey, SessionStorageKeys } from \"./sessionStorage\";\n\nexport const logout = () => {\n  setSessionStorageKey(SessionStorageKeys.UserId, \"\");\n  window.location.reload();\n};\n","import * as React from \"react\";\nimport cx from \"classnames\";\n\nimport \"./menuContentSection.less\";\n\nimport { crossSvg, arrowSvg } from \"../svg/Icons\";\n\nexport enum ArrowDirection {\n  Right,\n  Left,\n}\n\nexport interface MenuContentSectionProps {\n  title: string;\n  content: JSX.Element;\n  withFooter?: boolean;\n  arrow?: ArrowDirection;\n  arrowOnClick?: () => void;\n  crossOnClick: () => void;\n}\n\nexport class MenuContentSection extends React.PureComponent<\n  MenuContentSectionProps\n> {\n  public render() {\n    return (\n      <div className=\"section\">\n        <button\n          className=\"cross\"\n          onClick={this.props.crossOnClick}\n          tabIndex={0}\n        >\n          {crossSvg}\n        </button>\n        <div className=\"header\">\n          <h2>{this.props.title}</h2>\n        </div>\n        <div className=\"scrollable\">{this.props.content}</div>\n        {this.props.withFooter && (\n          <div className=\"footer\">\n            <button\n              className={cx(\n                \"arrow\",\n                this.props.arrow === ArrowDirection.Left && \"left\"\n              )}\n              onClick={this.props.arrowOnClick}\n              tabIndex={0}\n            >\n              {arrowSvg}\n            </button>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport cx from \"classnames\";\n\nimport \"./mainMenu.less\";\n\nimport {\n  LinkButton,\n  mapPropsToMenuButtons,\n  MenuButtonProps,\n} from \"../buttons/Button\";\nimport { getHasCurrentGame, isUserLoggedIn } from \"../app/ducks/selectors\";\nimport { GameConfig, GameDifficulty } from \"../../consts\";\nimport {\n  setLobbyMenuSection,\n  startNewGame,\n  continueGame,\n} from \"../app/ducks/actions\";\nimport { MenuSection } from \"../menu-content/types\";\nimport { openForm } from \"../login-form/ducks/actions\";\nimport { logout } from \"../../utils/logout\";\n\nconst menuSectionButtons = [\n  MenuSection.Settings,\n  MenuSection.Stats,\n  MenuSection.Rules,\n  MenuSection.About,\n];\n\n// TODO: Re-enable once backend is back online\nconst isLoginRegisterEnabled = false;\n\nexport const MainMenu: React.FC = () => {\n  const dispatch = useDispatch();\n  const hasCurrentGame = useSelector(getHasCurrentGame);\n  const isLoggedIn = useSelector(isUserLoggedIn);\n\n  const showLogin = () => {\n    dispatch(openForm(\"Login\"));\n  };\n  const showRegister = () => {\n    dispatch(openForm(\"Register\"));\n  };\n  const generateGame = useCallback((props: GameConfig) => {\n    dispatch(startNewGame(props));\n  }, []);\n\n  const leftColumn: MenuButtonProps[] = [\n    {\n      value: \"Resume\",\n      disabled: !hasCurrentGame,\n      onClick: hasCurrentGame ? () => dispatch(continueGame()) : () => {},\n    },\n    {\n      value: \"Easy\",\n      onClick: () => generateGame({ difficulty: GameDifficulty.Easy }),\n    },\n    {\n      value: \"Medium\",\n      onClick: () => generateGame({ difficulty: GameDifficulty.Medium }),\n    },\n    {\n      value: \"Hard\",\n      onClick: () => generateGame({ difficulty: GameDifficulty.Hard }),\n    },\n  ];\n\n  const rightColumn: MenuButtonProps[] = menuSectionButtons.map(\n    (section: MenuSection) => ({\n      value: section,\n      onClick: () => dispatch(setLobbyMenuSection(section)),\n    })\n  );\n\n  return (\n    <>\n      <div className=\"column-container\">\n        <div className=\"column\">{mapPropsToMenuButtons(leftColumn)}</div>\n        <div className=\"column\">{mapPropsToMenuButtons(rightColumn)}</div>\n      </div>\n      {isLoginRegisterEnabled && (\n        <div className={cx(\"column-container\", \"login-btns\")}>\n          {isLoggedIn ? (\n            <LinkButton value=\"Logout\" onClick={logout} />\n          ) : (\n            <>\n              <LinkButton value=\"Login\" textAlign=\"right\" onClick={showLogin} />\n              <span className={\"separator\"}>/</span>\n              <LinkButton\n                value=\"Sign Up\"\n                textAlign=\"left\"\n                onClick={showRegister}\n              />\n            </>\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n","import React, { useState, useCallback } from \"react\";\nimport cx from \"classnames\";\nimport {\n  LocalStorageKeys,\n  getStorageKey,\n  setStorageKey,\n} from \"../../utils/localStorage\";\n\nimport \"./checkbox.less\";\n\nexport interface CheckBoxProps {\n  text: string;\n  storageKey: LocalStorageKeys;\n  onChange?: (isChecked: boolean) => void;\n}\n\nexport const Checkbox: React.FC<CheckBoxProps> = ({\n  text,\n  storageKey,\n  onChange,\n}) => {\n  const [isChecked, setIsChecked] = useState(!!getStorageKey(storageKey));\n  const onChangeHandler = useCallback(() => {\n    const newChecked = !isChecked;\n    setStorageKey(storageKey, newChecked);\n    setIsChecked(newChecked);\n    if (onChange) {\n      onChange(newChecked);\n    }\n  }, [isChecked, setIsChecked, storageKey, onChange]);\n\n  return (\n    <label className={cx(\"checkbox-label\", isChecked && \"checked\")}>\n      <input\n        className=\"checkbox\"\n        type=\"checkbox\"\n        checked={isChecked}\n        onChange={onChangeHandler}\n      />\n      <span>{text}</span>\n    </label>\n  );\n};\n","import React, { useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { MenuContentSection } from \"./MenuContentSection\";\nimport { SharedSectionProps, MenuSection } from \"./types\";\nimport { Checkbox, CheckBoxProps } from \"../checkbox/Checkbox\";\nimport { LocalStorageKeys } from \"../../utils/localStorage\";\nimport { resetErrorCells, updatePencilCells } from \"../game-page/ducks/actions\";\n\nconst disableHighlightingProps: CheckBoxProps = {\n  text: \"Disable cell highlighting\",\n  storageKey: LocalStorageKeys.DisableHighlighting,\n};\nconst disableAutoNotesRemovalProps: CheckBoxProps = {\n  text: \"Disable automatic removal of notes values\",\n  storageKey: LocalStorageKeys.DisableAutoNotesRemoval,\n};\n\nexport const SettingsSection: React.FC<SharedSectionProps> = ({\n  crossOnClick,\n  arrowOnClick,\n}) => {\n  const dispatch = useDispatch();\n  const onErrorDisabledChange = useCallback(\n    (isChecked: boolean) => {\n      if (isChecked) {\n        dispatch(resetErrorCells());\n      } else {\n        dispatch(updatePencilCells());\n      }\n    },\n    [dispatch]\n  );\n  const disableInGameProps: CheckBoxProps = {\n    text: \"Disable in-game error\",\n    storageKey: LocalStorageKeys.DisableInGameError,\n    onChange: onErrorDisabledChange,\n  };\n\n  const Content = (\n    <>\n      <Checkbox {...disableInGameProps} />\n      <Checkbox {...disableHighlightingProps} />\n      <Checkbox {...disableAutoNotesRemovalProps} />\n    </>\n  );\n\n  return (\n    <MenuContentSection\n      title={MenuSection.Settings}\n      content={Content}\n      crossOnClick={crossOnClick}\n      arrowOnClick={arrowOnClick}\n    />\n  );\n};\n","import * as React from \"react\";\n\nimport { MenuContentSection } from \"./MenuContentSection\";\nimport { SharedSectionProps, MenuSection } from \"./types\";\n\nexport class RulesSection extends React.PureComponent<SharedSectionProps> {\n  public render() {\n    const paragraph1 =\n      \"The classic Sudoku game involves a table of 81 squares. The table is divided \" +\n      \"into nine 3x3 grids, each containing nine squares.\";\n    const paragraph2 =\n      \"To win the game, each of the nine grids has to contain all the numbers 1-9 within \" +\n      \"its cells. Each number can only appear once in a row, column or grid.\";\n    return (\n      <MenuContentSection\n        title={MenuSection.Rules}\n        content={\n          <React.Fragment>\n            <p>{paragraph1}</p>\n            <p>{paragraph2}</p>\n          </React.Fragment>\n        }\n        crossOnClick={this.props.crossOnClick}\n        arrowOnClick={this.props.arrowOnClick}\n      />\n    );\n  }\n}\n","import * as React from \"react\";\n\nimport { MenuContentSection, ArrowDirection } from \"./MenuContentSection\";\nimport { SharedSectionProps, MenuSection } from \"./types\";\n\nexport class ContactsSection extends React.PureComponent<SharedSectionProps> {\n  public render() {\n    return (\n      <MenuContentSection\n        title={MenuSection.Contacts}\n        withFooter={true}\n        arrow={ArrowDirection.Left}\n        content={\n          <React.Fragment>\n            <p>\n              <strong>Developer:</strong> Sara Jegorova{\" \"}\n              <a\n                href=\"https://github.com/kobawan\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                (@kobawan)\n              </a>\n            </p>\n            <p>\n              <strong>Report an issue: </strong>\n              <a\n                href=\"https://github.com/kobawan/sudoku/issues\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                https://github.com/kobawan/sudoku/issues\n              </a>\n            </p>\n          </React.Fragment>\n        }\n        crossOnClick={this.props.crossOnClick}\n        arrowOnClick={this.props.arrowOnClick}\n      />\n    );\n  }\n}\n","import * as React from \"react\";\n\nimport { MenuContentSection } from \"./MenuContentSection\";\nimport { SharedSectionProps, MenuSection } from \"./types\";\n\nexport class StatsSection extends React.PureComponent<SharedSectionProps> {\n  public render() {\n    return (\n      <MenuContentSection\n        title={MenuSection.Stats}\n        content={<p>TBD</p>}\n        crossOnClick={this.props.crossOnClick}\n        arrowOnClick={this.props.arrowOnClick}\n      />\n    );\n  }\n}\n","import * as React from \"react\";\n\nimport { MenuContentSection } from \"./MenuContentSection\";\nimport { SharedSectionProps, MenuSection } from \"./types\";\n\nexport class AboutSection extends React.PureComponent<SharedSectionProps> {\n  public render() {\n    const paragraph1 =\n      \"Hi! My name is Sara (Kobawan on github). I've always been a fan of puzzles, \" +\n      \"so when I started programming, I came up with the idea to combine my two joys of \" +\n      \"puzzles and programming, to create this website.\";\n    const paragraph2 =\n      \"It's been a fun project to create. Sometimes challenging and time-consuming, \" +\n      \"but in the end, a very good opportunity to learn programming.\";\n    const paragraph3 =\n      \"Along with creating more projects than I can handle, I also knit, play with my \" +\n      \"dogs, and binge watch netflix.\";\n    return (\n      <MenuContentSection\n        title={MenuSection.About}\n        withFooter={true}\n        content={\n          <React.Fragment>\n            <p>{paragraph1}</p>\n            <p>{paragraph2}</p>\n            <p>{paragraph3}</p>\n            <p>I hope you enjoy!</p>\n          </React.Fragment>\n        }\n        crossOnClick={this.props.crossOnClick}\n        arrowOnClick={this.props.arrowOnClick}\n      />\n    );\n  }\n}\n","export const onFormItemChange = (\n  cb: (value: string) => void,\n  setFormError: (value: string) => void\n) => {\n  return (e: React.ChangeEvent<HTMLInputElement>) => {\n    cb(e.currentTarget.value);\n    setFormError(\"\");\n  };\n};\n\nexport const onFormItemBlur = (\n  validator: (value: string) => string | undefined,\n  setFormError: (value: string) => void\n) => {\n  return (e: React.FocusEvent<HTMLInputElement>) => {\n    const error = validator(e.currentTarget.value);\n    if (error) {\n      setFormError(error);\n    }\n  };\n};\n","import { RootState } from \"../../../ducks/store\";\n\nexport const getLoginFormProps = (state: RootState) => state.loginForm;\nexport const isRegistrationForm = (state: RootState) =>\n  state.loginForm.formType === \"Register\";\nexport const isLoginRegistrationFormOpen = (state: RootState) =>\n  state.loginForm.isFormOpen;\n","import React, { useCallback, MouseEvent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport cx from \"classnames\";\nimport \"./loginForm.less\";\nimport { LoadingButton } from \"../buttons/Button\";\nimport { loginUser } from \"../app/ducks/actions\";\nimport { onFormItemBlur } from \"../../utils/formHandlers\";\nimport { getLoginFormProps, isRegistrationForm } from \"./ducks/selectors\";\nimport {\n  toggleFormType,\n  setFormLoading,\n  setUsername,\n  setPassword,\n  setConfirmPassword,\n  setFormError,\n  closeForm,\n} from \"./ducks/actions\";\n\nconst validateUsername = (value: string) => {\n  if (!value) {\n    return \"Field 'Username' cannot be empty\";\n  }\n  if (value.length < 3) {\n    return \"Field 'Username' should have at least 3 characters\";\n  }\n};\n\nconst validatePassword = (value: string) => {\n  // TODO: add validator for strong passwords\n  if (!value) {\n    return \"Field 'Password' cannot be empty\";\n  }\n  if (value.length < 6) {\n    return \"Field 'Password' should have at least 6 characters\";\n  }\n};\n\nconst validateConfirmPassword = (pwd: string, confirmPwd: string) => {\n  if (pwd !== confirmPwd) {\n    return \"Passwords don't match\";\n  }\n};\n\nexport const LoginForm: React.FC = () => {\n  const {\n    username,\n    password,\n    confirmPassword,\n    formError,\n    formIsLoading,\n  } = useSelector(getLoginFormProps);\n  const isRegistration = useSelector(isRegistrationForm);\n  const dispatch = useDispatch();\n\n  const toggleForm = useCallback(\n    (e: MouseEvent) => {\n      e.preventDefault();\n      if (formIsLoading) {\n        return;\n      }\n      dispatch(toggleFormType());\n    },\n    [formIsLoading]\n  );\n\n  const setError = useCallback(\n    (error: string) => dispatch(setFormError(error)),\n    []\n  );\n  const handleUsernameChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      dispatch(setUsername(e.currentTarget.value));\n    },\n    []\n  );\n  const handlePasswordChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      dispatch(setPassword(e.currentTarget.value));\n    },\n    []\n  );\n  const handleConfirmPasswordChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      dispatch(setConfirmPassword(e.currentTarget.value));\n    },\n    []\n  );\n  const onUsernameBlur = useCallback(\n    onFormItemBlur(validateUsername, setError),\n    []\n  );\n  const onPasswordBlur = useCallback(\n    onFormItemBlur(validatePassword, setError),\n    []\n  );\n  const onConfirmPasswordBlur = useCallback(\n    onFormItemBlur(\n      () => validateConfirmPassword(password, confirmPassword),\n      setError\n    ),\n    [password, confirmPassword]\n  );\n\n  const onSubmit = useCallback(\n    async (e: React.MouseEvent<HTMLInputElement>) => {\n      e.preventDefault();\n\n      dispatch(setFormLoading(true));\n      await dispatch(\n        loginUser(username.trim(), password.trim(), isRegistration)\n      );\n      dispatch(closeForm());\n    },\n    [username, password, isRegistration]\n  );\n\n  const onCancel = () => {\n    dispatch(closeForm());\n  };\n\n  return (\n    <form className=\"loginForm\">\n      <div className=\"row\">\n        <label htmlFor=\"username-input\" className=\"label\">\n          Username:\n        </label>\n        <input\n          id=\"username-input\"\n          className=\"input\"\n          type=\"text\"\n          onChange={handleUsernameChange}\n          onBlur={onUsernameBlur}\n          disabled={formIsLoading}\n          value={username}\n        />\n      </div>\n      <div className=\"row\">\n        <label htmlFor=\"password-input\" className=\"label\">\n          Password:\n        </label>\n        <input\n          id=\"password-input\"\n          className=\"input\"\n          type=\"password\"\n          onChange={handlePasswordChange}\n          onBlur={onPasswordBlur}\n          disabled={formIsLoading}\n          value={password}\n        />\n      </div>\n      {isRegistration && (\n        <div className=\"row\">\n          <label htmlFor=\"confirm-password-input\" className=\"label\">\n            Confirm Password:\n          </label>\n          <input\n            id=\"confirm-password-input\"\n            className=\"input\"\n            type=\"password\"\n            onChange={handleConfirmPasswordChange}\n            onBlur={onConfirmPasswordBlur}\n            disabled={formIsLoading}\n            value={confirmPassword}\n          />\n        </div>\n      )}\n      <div className={cx(\"row\", !formError && \"hidden\")}>\n        <span className=\"formError\">{formError}</span>\n      </div>\n      <div className=\"row buttonRow\">\n        <LoadingButton onClick={onCancel} value=\"Cancel\" />\n        <LoadingButton\n          onClick={onSubmit}\n          value=\"Submit\"\n          disabled={\n            !username || !password.length || !!formError || formIsLoading\n          }\n          loading={formIsLoading}\n        />\n      </div>\n      <div className=\"row\">\n        <button\n          className={cx(\"formSwitch\", formIsLoading && \"disabled\")}\n          onClick={toggleForm}\n          disabled={formIsLoading}\n        >\n          {isRegistration ? \"Login\" : \"Register\"}\n        </button>\n      </div>\n    </form>\n  );\n};\n","import React, { useCallback } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport cx from \"classnames\";\nimport \"./lobbyPage.less\";\n\nimport { MainMenu } from \"../main-menu/MainMenu\";\nimport { MenuSection, SharedSectionProps } from \"../menu-content/types\";\nimport { SettingsSection } from \"../menu-content/SettingsSection\";\nimport { RulesSection } from \"../menu-content/RulesSection\";\nimport { ContactsSection } from \"../menu-content/ContactsSection\";\nimport { StatsSection } from \"../menu-content/StatsSection\";\nimport { AboutSection } from \"../menu-content/AboutSection\";\nimport {\n  getLobbyIsLoading,\n  getLobbyHasError,\n  getLobbyMenuSection,\n} from \"../app/ducks/selectors\";\nimport { setLobbyMenuSection } from \"../app/ducks/actions\";\nimport { spinnerSvg } from \"../svg/Icons\";\nimport { LoginForm } from \"../login-form/LoginForm\";\nimport { isLoginRegistrationFormOpen } from \"../login-form/ducks/selectors\";\n\ntype MapMenuSectionToComponentIndexSignature = {\n  [k in MenuSection]: React.ComponentType<SharedSectionProps>;\n};\n\nconst mapMenuSectionToComponent: MapMenuSectionToComponentIndexSignature = {\n  [MenuSection.Stats]: StatsSection,\n  [MenuSection.Settings]: SettingsSection,\n  [MenuSection.Rules]: RulesSection,\n  [MenuSection.About]: AboutSection,\n  [MenuSection.Contacts]: ContactsSection,\n};\n\nexport interface LobbyPageState {\n  currentSection?: MenuSection;\n}\n\nexport interface LobbyPageProps {\n  hidden: boolean;\n}\n\nconst getSectionComponent = (\n  setSection: (section?: MenuSection) => void,\n  currentSection?: MenuSection\n) => {\n  if (!currentSection) {\n    return null;\n  }\n\n  const Component = mapMenuSectionToComponent[currentSection];\n  const setSubSection = () => {\n    if (currentSection === MenuSection.About) {\n      setSection(MenuSection.Contacts);\n      return;\n    }\n    if (currentSection === MenuSection.Contacts) {\n      setSection(MenuSection.About);\n      return;\n    }\n  };\n\n  return (\n    <Component\n      crossOnClick={() => setSection(undefined)}\n      arrowOnClick={setSubSection}\n    />\n  );\n};\n\nexport const LobbyPage: React.FC<LobbyPageProps> = ({ hidden }) => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getLobbyIsLoading);\n  const hasError = useSelector(getLobbyHasError);\n  const currentSection = useSelector(getLobbyMenuSection);\n  const isReady = !isLoading && !hasError;\n  const setSection = useCallback(\n    (section?: MenuSection) => dispatch(setLobbyMenuSection(section)),\n    [dispatch, setLobbyMenuSection]\n  );\n  const isFormOpen = useSelector(isLoginRegistrationFormOpen);\n\n  return (\n    <div className={cx(\"lobby\", hidden && \"hidden\")}>\n      <div className=\"lobby-wrapper\">\n        <h1 className=\"menu-logo\">Sudokuuu</h1>\n        {hasError && (\n          <h3>\n            An error has occurred :(<br></br>Please refresh the page!\n          </h3>\n        )}\n        {isLoading && !hasError && <div className=\"loading\">{spinnerSvg}</div>}\n        {isFormOpen && isReady && <LoginForm />}\n        {!isFormOpen && isReady && (\n          <>\n            <MainMenu />\n            {getSectionComponent(setSection, currentSection)}\n          </>\n        )}\n        <a\n          href=\"https://github.com/kobawan\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className={\"copyright\"}\n        >\n          @kobawan\n        </a>\n      </div>\n    </div>\n  );\n};\n","import { RootState } from \"../../../ducks/store\";\n\nexport const getSideMenuIsOpen = (state: RootState) => state.sideMenu.isOpen;\n","import React, { useCallback, MouseEvent } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport cx from \"classnames\";\n\nimport \"./sideMenu.less\";\n\nimport { MenuButtonProps, MenuButton } from \"../buttons/Button\";\nimport { menuSvg } from \"../svg/Icons\";\nimport { checkForWin } from \"../game-page/ducks/actions\";\nimport { showResetPopup, showSolvePopup } from \"../popup/ducks/actions\";\nimport { getSideMenuIsOpen } from \"./ducks/selectors\";\nimport { toggleSideMenu } from \"./ducks/actions\";\nimport { save } from \"../app/ducks/actions\";\n\ninterface SideMenuProps {\n  returnToLobby: () => void;\n}\n\nexport const SideMenu: React.FC<SideMenuProps> = ({ returnToLobby }) => {\n  const dispatch = useDispatch();\n  const isOpen = useSelector(getSideMenuIsOpen);\n  const toggleMenu = useCallback(() => dispatch(toggleSideMenu()), []);\n\n  const sideMenuButtons: MenuButtonProps[] = [\n    {\n      // FIXME: Hide this button when screen is smaller\n      value: \"Return\",\n      onClick: () => {},\n    },\n    {\n      value: \"Reset\",\n      onClick: () => showResetPopup(dispatch),\n    },\n    {\n      value: \"Check\",\n      onClick: () => dispatch(checkForWin()),\n    },\n    {\n      value: \"Solve\",\n      onClick: () => showSolvePopup(dispatch),\n    },\n    {\n      value: \"Save\",\n      onClick: () => dispatch(save()),\n    },\n    {\n      value: \"Quit\",\n      onClick: returnToLobby,\n    },\n  ];\n\n  return (\n    <div className={cx(\"side-menu-container\", isOpen ? \"opened\" : \"hidden\")}>\n      <div className=\"side-menu-overlay\" onClick={toggleMenu} />\n      <div className=\"side-menu\">\n        <div className=\"menu\">\n          <h1 className=\"side-menu-logo\">Sudokuuu</h1>\n          <div className=\"buttons-wrapper\">\n            {sideMenuButtons.map((props, index) => (\n              <MenuButton\n                {...props}\n                onClick={(e: MouseEvent) => {\n                  toggleMenu();\n                  props.onClick(e);\n                }}\n                key={index}\n                hidden={!isOpen}\n              />\n            ))}\n          </div>\n          <span>\n            <a\n              href=\"https://github.com/kobawan\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              tabIndex={isOpen ? 0 : -1}\n            >\n              @kobawan\n            </a>\n          </span>\n        </div>\n        <button\n          className={cx(\"side-menu-button\", isOpen && \"opened\")}\n          onClick={toggleMenu}\n        >\n          {menuSvg}\n        </button>\n      </div>\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport cx from \"classnames\";\n\nimport \"./cell.less\";\n\nimport { CellMode } from \"../../consts\";\nimport { arrowKeys, selectCellContent } from \"./helpers\";\nimport {\n  highLightCells,\n  updateNotesCells,\n  updatePencilCells,\n  updateCellValue,\n} from \"../game-page/ducks/actions\";\nimport {\n  getCellMode,\n  areCellsDisabled,\n  getCellPropsById,\n} from \"../game-page/ducks/selectors\";\n\ninterface CellComponentProps {\n  pos: number;\n  col: number;\n  row: number;\n  grid: number;\n}\n\nexport const Cell: React.FC<CellComponentProps> = ({ pos, col, row, grid }) => {\n  const dispatch = useDispatch();\n  const cellMode = useSelector(getCellMode);\n  const currentCellProps = useSelector(getCellPropsById(pos));\n  const isDisabled = useSelector(areCellsDisabled);\n  const { mode, value, withError, withHighlight } = currentCellProps;\n\n  const onSelect = (\n    e:\n      | React.FocusEvent<HTMLTextAreaElement>\n      | React.MouseEvent<HTMLTextAreaElement>\n  ) => {\n    const cell = e.target as HTMLTextAreaElement;\n    selectCellContent({ cell, props: currentCellProps, cellMode });\n    dispatch(highLightCells(currentCellProps));\n  };\n\n  const onKeyup: React.KeyboardEventHandler<HTMLTextAreaElement> = e => {\n    const coor = { x: row, y: col, grid };\n\n    // removes notes from column, row and grid where the pencil value was inserted, if enabled in settings\n    dispatch(updateNotesCells(coor));\n\n    // resets highlights, shows cell errors if enabled in settings and checks if game is solved\n    dispatch(updatePencilCells());\n\n    // use arrow keys to move from cell to cell\n    arrowKeys(e.keyCode, coor);\n  };\n\n  const onInput: React.ChangeEventHandler<HTMLTextAreaElement> = e => {\n    const cell = e.target as HTMLTextAreaElement;\n\n    // Filters invalid inputs updates cell with new value and mode\n    dispatch(updateCellValue(pos, cell.value));\n  };\n\n  return (\n    <textarea\n      id={`cell-${pos}`}\n      tabIndex={-1}\n      readOnly={mode === CellMode.ReadOnly || isDisabled}\n      maxLength={mode !== CellMode.Notes ? 1 : 9}\n      rows={1}\n      cols={1}\n      value={value || \"\"}\n      className={cx(\n        mode,\n        isDisabled && \"disabled\",\n        withError && mode !== CellMode.Notes && \"error\",\n        withHighlight && mode !== CellMode.Notes && \"highlight\"\n      )}\n      onKeyUp={!isDisabled ? onKeyup : undefined}\n      onFocus={!isDisabled ? onSelect : undefined}\n      onClick={!isDisabled ? onSelect : undefined}\n      onChange={!isDisabled && mode !== CellMode.ReadOnly ? onInput : undefined}\n    />\n  );\n};\n","import { CellCoordinates, CellProps, CellMode } from \"../../consts\";\nimport { Game } from \"../../generator/generator\";\n\n/**\n * Returns coordinates of selected cell\n */\nexport const findCoordinates = (\n  gameRatio: number,\n  selectedCell: HTMLTextAreaElement\n): CellCoordinates => {\n  const tableCell = selectedCell.parentElement as HTMLTableDataCellElement;\n  const tableRow = tableCell.parentElement as HTMLTableRowElement;\n  const coorRow = tableRow.rowIndex;\n  const coorCol = tableCell.cellIndex;\n  const coorGrid =\n    Math.floor(coorRow / gameRatio) * gameRatio +\n    Math.floor(coorCol / gameRatio);\n  return { x: coorRow, y: coorCol, grid: coorGrid };\n};\n\nexport const getCellPosFromElement = ({\n  game,\n  cell,\n}: {\n  cell: HTMLTextAreaElement;\n  game: Game;\n}) => {\n  const { x, y } = findCoordinates(game.ratio, cell);\n  return x * game.gameType + y;\n};\n\n/**\n * Key up event to move cells using arrows\n */\nexport const arrowKeys = (keyCode: number, coor: CellCoordinates) => {\n  const sudokuTable = document.querySelector(\n    \"#SudokuTable\"\n  ) as HTMLTableElement;\n  let coorRow = coor.x;\n  let coorCol = coor.y;\n\n  switch (keyCode) {\n    case 37: // left arrow\n      coorCol === 0 ? (coorCol = 8) : coorCol--;\n      break;\n    case 38: // up arrow\n      coorRow === 0 ? (coorRow = 8) : coorRow--;\n      break;\n    case 39: // right arrow\n      coorCol === 8 ? (coorCol = 0) : coorCol++;\n      break;\n    case 40: // down arrow\n      coorRow === 8 ? (coorRow = 0) : coorRow++;\n      break;\n    default:\n      break;\n  }\n\n  const nextCell = sudokuTable.rows[coorRow].cells[coorCol]\n    .children[0] as HTMLTextAreaElement;\n  nextCell.focus();\n};\n\nexport const selectCellContent = ({\n  cell,\n  props,\n  cellMode,\n}: {\n  cell: HTMLTextAreaElement;\n  props: CellProps;\n  cellMode: CellMode;\n}) => {\n  if (\n    (cellMode === CellMode.Notes && props.mode === CellMode.Pencil) ||\n    (cellMode === CellMode.Pencil && props.mode !== CellMode.ReadOnly)\n  ) {\n    cell.select();\n  }\n};\n","import React, { useCallback, useRef } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport \"./sudokuTable.less\";\n\nimport { Cell } from \"../sudoku-cell/Cell\";\nimport { GameType } from \"../../consts\";\nimport { useOutsideClickHandle } from \"../../utils/useOutsideClickHandle\";\nimport { resetHighLightCells } from \"../game-page/ducks/actions\";\n\nexport interface SudokuTableProps {\n  gameType: GameType;\n  gameRatio: number;\n}\n\nexport const SudokuTable: React.FC<SudokuTableProps> = ({\n  gameType,\n  gameRatio,\n}) => {\n  const dispatch = useDispatch();\n  const ref = useRef<HTMLTableElement | null>(null);\n  const dispatchReset = useCallback(() => {\n    dispatch(resetHighLightCells());\n  }, [dispatch]);\n  useOutsideClickHandle(ref, dispatchReset);\n\n  const getTable = useCallback(() => {\n    const rows: JSX.Element[] = [];\n    for (let row = 0; row < gameType; row++) {\n      const cols: JSX.Element[] = [];\n      for (let col = 0; col < gameType; col++) {\n        const id = row * gameType + col;\n        const grid =\n          Math.floor(row / gameRatio) * gameRatio + Math.floor(col / gameRatio);\n        cols.push(\n          <td key={col}>\n            <Cell pos={id} col={col} row={row} grid={grid} />\n          </td>\n        );\n      }\n      rows.push(<tr key={row}>{cols}</tr>);\n    }\n\n    return rows;\n  }, [gameType, gameRatio]);\n\n  return (\n    <table ref={ref} className=\"sudoku\" id=\"SudokuTable\">\n      <tbody>{getTable()}</tbody>\n    </table>\n  );\n};\n","import { useEffect, MutableRefObject } from \"react\";\n\nexport const useOutsideClickHandle = <El extends HTMLElement | null>(\n  ref: MutableRefObject<El>,\n  clickHandler: (e: MouseEvent) => void\n) => {\n  useEffect(() => {\n    function handleClickOutside(event: MouseEvent) {\n      if (\n        ref.current &&\n        ref.current.contains(document.activeElement) &&\n        !ref.current.contains(event.target as Node | null)\n      ) {\n        clickHandler(event);\n      }\n    }\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [ref]);\n};\n","import * as React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport \"./slider.less\";\n\nimport { toggleCellMode } from \"../game-page/ducks/actions\";\nimport { getCellMode } from \"../game-page/ducks/selectors\";\n\nexport const Slider: React.FC = () => {\n  const dispatch = useDispatch();\n  const cellMode = useSelector(getCellMode);\n\n  return (\n    <div className=\"game-buttons\" onClick={() => dispatch(toggleCellMode())}>\n      <span>Pencil</span>\n      <span>Notes</span>\n      <div className={`slider ${cellMode}-slider`} />\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport \"./gamePage.less\";\n\nimport { SideMenu } from \"../side-menu/SideMenu\";\nimport { Game } from \"../../generator/generator\";\nimport { SudokuTable } from \"../sudoku-table/SudokuTable\";\nimport { Slider } from \"../slider/Slider\";\n\nexport interface GamePageProps {\n  game: Game;\n  returnToLobby: () => void;\n}\n\nexport const GamePage: React.FC<GamePageProps> = ({ game, returnToLobby }) => {\n  return (\n    <div className=\"game\">\n      <SideMenu returnToLobby={returnToLobby} />\n      <div className=\"game-wrapper\">\n        <SudokuTable gameType={game.gameType} gameRatio={game.ratio} />\n        <Slider />\n      </div>\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./ducks/store\";\n\nimport { App } from \"./components/app/App\";\nimport \"../styles/common.less\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","import React, { useCallback, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { LobbyPage } from \"../lobby-page/LobbyPage\";\nimport { GamePage } from \"../game-page/GamePage\";\nimport { Page } from \"../../consts\";\nimport { getPage, getCurrentGame, getLobbyIsLoading } from \"./ducks/selectors\";\nimport { setPage, findUser } from \"./ducks/actions\";\nimport { Popup } from \"../popup/Popup\";\n\nexport const App: React.FC = () => {\n  const dispatch = useDispatch();\n  const selectedPage = useSelector(getPage);\n  const currentGame = useSelector(getCurrentGame);\n  const isLoading = useSelector(getLobbyIsLoading);\n\n  const isLobby = selectedPage === Page.Menu;\n  const returnToLobby = useCallback(() => {\n    dispatch(setPage(Page.Menu));\n  }, []);\n\n  useEffect(() => {\n    dispatch(findUser());\n  }, []);\n\n  return (\n    <>\n      <LobbyPage hidden={!isLobby} />\n      {!isLoading && currentGame && !isLobby && (\n        <GamePage game={currentGame} returnToLobby={returnToLobby} />\n      )}\n      <Popup />\n    </>\n  );\n};\n"],"sourceRoot":""}